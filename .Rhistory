.libPaths("C:/Users/admin/R/4.0/")
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
roxygen2::roxygenize()
devtools::install(quick=FALSE)
devtools::load_all()
b1 <- st_sf(st_sfc(st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0))))))
require(sf)
b1 <- st_sf(st_sfc(st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0))))))
g1 <- create_grid(b1,0.5)
g1
plot(g1)
dp <- data.frame(y=runif(10,0,3),x=runif(10,0,3),date=paste0("2021-01-",11:20))
dp <- create_points(dp,pos_vars = c('y','x'),t_var='date')
cov1 <- create_grid(b1,0.8)
cov1$cov <- runif(nrow(cov1))
g1 <- add_covariates(g1,
cov1,
zcols="cov",
verbose = FALSE)
g1
plot(g1)
g1 <- points_to_grid(g1, dp, laglength=5)
require(lubridate)
g1 <- points_to_grid(g1, dp, laglength=5)
g1
g1 <- points_to_grid(g1, dp, laglength=3)
b1 <- st_sf(st_sfc(st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0))))))
g1 <- create_grid(b1,0.5)
dp <- data.frame(y=runif(10,0,3),x=runif(10,0,3),date=paste0("2021-01-",11:20))
dp <- create_points(dp,pos_vars = c('y','x'),t_var='date')
cov1 <- create_grid(b1,0.8)
cov1$cov <- runif(nrow(cov1))
g1 <- add_covariates(g1,
cov1,
zcols="cov",
verbose = FALSE)
g1 <- points_to_grid(g1, dp, laglength=3)
res <- lgcp_fit(g1,
popdens="cov")
priors <- list(
prior_lscale=c(0,0.5),
prior_var=c(0,0.5),
prior_linpred_mean=c(0),
prior_linpred_sd=c(5)
)
priors <- list(
prior_lscale=c(0,0.5),
prior_var=c(0,0.5),
prior_linpred_mean=c(0),
prior_linpred_sd=c(5)
)
res <- lgcp_fit(g1,
popdens="cov",
priors = priors)
priors
res <- lgcp_fit(g1,
popdens="cov",
priors = priors)
priors$prior_linpred_mean
priors$prior_linpred_mean[1]
devtools::unload()
devtools::load_all()
res <- lgcp_fit(g1,
popdens="cov",
priors = priors)
devtools::unload()
devtools::load_all()
res <- lgcp_fit(g1,
popdens="cov",
priors = priors)
as.array(c(0))
as.array(c(0,2))
devtools::unload()
devtools::load_all()
res <- lgcp_fit(g1,
popdens="cov",
priors = priors)
devtools::unload()
roxygen2::roxygenize()
devtools::load_all()
help(extract_preds)
o1 <- extract_preds(g1,
res,
popdens="cov")
o1 <- extract_preds(g1,
res,
type=c("pred","rr"),
popdens="cov")
devtools::unload()
devtools::load_all()
help(extract_preds)
o1 <- extract_preds(g1,
res,
type=c("pred","rr"),
popdens="cov")
tmp <- rstan::extract(res,"f")
tmp
dim(tmp)
tmp$f
dim(tmp$f)
devtools::unload()
devtools::load_all()
o1 <- extract_preds(g1,
res,
type=c("pred","rr"),
popdens="cov")
devtools::load_all()
o1 <- extract_preds(g1,
res,
type=c("pred","rr"),
popdens="cov")
devtools::load_all()
o1 <- extract_preds(g1,
res,
type=c("pred","rr"),
popdens="cov")
plot(o1[,"rr"])
help("capture.output")
capture.output(1+1)
capture.output(1+1, file = tempfile())
capture.output(a <- 1+1, file = tempfile())
a
devtools::load_all()
res2 <- lgcp_fit(g1,
popdens="cov",
priors = priors,
iter_warmup = 10,
iter_sampling = 10,
verbose = FALSE)
lgcp_fit
devtools::load_all()
res2 <- lgcp_fit(g1,
popdens="cov",
priors = priors,
iter_warmup = 10,
iter_sampling = 10,
verbose = FALSE)
devtools::load_all()
res2 <- lgcp_fit(g1,
popdens="cov",
priors = priors,
iter_warmup = 10,
iter_sampling = 10,
verbose = FALSE)
devtools::load_all()
res2 <- lgcp_fit(g1,
popdens="cov",
priors = priors,
iter_warmup = 10,
iter_sampling = 10,
verbose = FALSE)
rm(res2)
rm(tmp)
help(lgcp_fit)
devtools::load_all()
help(hotspots)
help(lgcp_fit)
devtools::unload()
devtools::document()
devtools::load_all()
help(hotspots)
plot(o1[,"pop_mean_pp"])
plot(o1[,"pred_mean_pp"])
.libPaths("C:/Users/admin/R/4.0/")
devtools::load_all()
#create a square boundary and some random data points with dates
b1 <- st_sf(st_sfc(st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0))))))
#create a square boundary and some random data points with dates
b1 <- sf::st_sf(sf::st_sfc(sf::st_polygon(list(cbind(c(0,3,3,0,0),c(0,0,3,3,0))))))
npoints <- 20
dp <- data.frame(y=3*sqrt(runif(npoints)),
x=3*sqrt(runif(npoints)),
date=paste0("2021-01-",sample(11:20,npoints,replace = TRUE)))
# create a coarse grid over the area
g1 <- create_grid(b1,0.5)
# create the points sf object
dp <- create_points(dp,pos_vars = c('y','x'),t_var='date')
plot(dp)
npoints <- 30
dp <- data.frame(y=3*sqrt(runif(npoints)),
x=3*sqrt(runif(npoints)),
date=paste0("2021-01-",sample(11:20,npoints,replace = TRUE)))
# create the points sf object
dp <- create_points(dp,pos_vars = c('y','x'),t_var='date')
plot(dp)
dp <- data.frame(y=3*sqrt(runif(npoints)),
x=3*sqrt(runif(npoints)),
date=paste0("2021-01-",sample(11:13,npoints,replace = TRUE)))
# create the points sf object
dp <- create_points(dp,pos_vars = c('y','x'),t_var='date')
plot(dp)
#create a random covariate over the area to act as population density
cov1 <- create_grid(b1,0.8)
cov1$cov <- runif(nrow(cov1))
# map the population density to the grid
g1 <- add_covariates(g1,
cov1,
zcols="cov",
verbose = FALSE)
plot(g1)
#aggregate the points to the grid
g1 <- points_to_grid(g1, dp, laglength=3)
devtools::load_all()
#aggregate the points to the grid
g1 <- points_to_grid(g1, dp, laglength=3)
plot(g1)
#set priors
priors <- list(
prior_lscale=c(0,0.5),
prior_var=c(0,0.5),
prior_linpred_mean=c(0),
prior_linpred_sd=c(5)
)
# run the model
res <- lgcp_fit(g1,
popdens="cov",
priors = priors)
# extract the predictions
o1 <- extract_preds(g1,
res,
type=c("pred","rr"),
popdens="cov")
plot(g1[,"t3"])
plot(o1[,"rr"])
plot(o1[,"pred_mean_total"])
plot(g1[,"t3"])
plot(o1[,"pred_mean_total"])
plot(o1[,"rr"])
extract_priors <- function(stan_fit){
if(!(is(stan_fit,"CmdStanMCMC")|is(stan_fit,"stanfit")))stop("stan fit required")
if(is(stan_fit,"stanfit")){
sig <- rstan::extract(stan_fit,"sigma")
gam <- rstan::extract(stan_fit,"gamma")
phi <- rstan::extract(stan_fit,"phi")
} else if(is(stan_fit,"CmdStanMCMC")){
if(requireNamespace("cmdstanr")){
ypred <- stan_fit$draws("y_grid_predict")
f <- stan_fit$draws("f")
}
}
out <- list(
prior_lscale=c(mean(phi),sd(phi)),
prior_var=c(mean(sig),sd(sig)),
prior_linpred_mean=apply(gam,2,mean),
prior_linpred_sd=apply(gam,2,sd)
)
return(out)
}
extract_priors(res)
sig <- rstan::extract(res,"sigma")
sig
dim(sig)
extract_priors <- function(stan_fit){
if(!(is(stan_fit,"CmdStanMCMC")|is(stan_fit,"stanfit")))stop("stan fit required")
if(is(stan_fit,"stanfit")){
sig <- rstan::extract(stan_fit,"sigma")
gam <- rstan::extract(stan_fit,"gamma")
phi <- rstan::extract(stan_fit,"phi")
} else if(is(stan_fit,"CmdStanMCMC")){
if(requireNamespace("cmdstanr")){
ypred <- stan_fit$draws("y_grid_predict")
f <- stan_fit$draws("f")
}
}
out <- list(
prior_lscale=c(mean(phi$phi),sd(phi$phi)),
prior_var=c(mean(sig$sig),sd(sig$sig)),
prior_linpred_mean=apply(gam$gam,2,mean),
prior_linpred_sd=apply(gam$gam,2,sd)
)
return(out)
}
extract_priors <- function(stan_fit){
if(!(is(stan_fit,"CmdStanMCMC")|is(stan_fit,"stanfit")))stop("stan fit required")
if(is(stan_fit,"stanfit")){
sig <- rstan::extract(stan_fit,"sigma")
gam <- rstan::extract(stan_fit,"gamma")
phi <- rstan::extract(stan_fit,"phi")
} else if(is(stan_fit,"CmdStanMCMC")){
if(requireNamespace("cmdstanr")){
ypred <- stan_fit$draws("y_grid_predict")
f <- stan_fit$draws("f")
}
}
out <- list(
prior_lscale=c(mean(phi$phi),sd(phi$phi)),
prior_var=c(mean(sig$sig),sd(sig$sigma)),
prior_linpred_mean=apply(gam$gamma,2,mean),
prior_linpred_sd=apply(gam$gamma,2,sd)
)
return(out)
}
extract_priors(res)
usethis::use_testthat()
usethis::use_test()
require(testthat)
devtools::unload()
devtools::document()
rm(list = c("extract_priors"))
rm(list=ls())
devtools::document()
devtools::install(quick=TRUE)
roxygen2::roxygenise()
.libPaths("C:/Users/admin/R")
.libPaths("C:/Users/admin/R/4.0/")
roxygen2::roxygenise()
devtools::install(quick=TRUE)
devtools::check()
install.packages("rlang", dependencies = c("Depends", "Imports", "LinkingTo", "Suggests"))
install.packages("rlang", dependencies = c("Depends", "Imports", "LinkingTo", "Suggests"))
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
.libPaths("C:/Users/admin/R/4.0/")
remove.packages("testthat")
install.packages("testthat")
devtools::check()
help(lgcp_fit)
help("weighted.mean")
help(sd)
help("model.matrix")
help(stack)
help("capture.output")
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
devtools::check()
devtools::install(quick=TRUE)
