// Generated by rstantools.  Do not edit by hand.

/*
    rts2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rts2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rts2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_mcml_poisson_region_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mcml_poisson_region");
    reader.add_event(44, 42, "end", "model_mcml_poisson_region");
    return reader;
}
template <typename T3__, typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T3__, T4__, T5__>::type, Eigen::Dynamic, 1>
gen_lambda(const int& nT,
               const int& nR,
               const int& nS,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xb,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& w,
               const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& gamma,
               const std::vector<int>& cell_id,
               const std::vector<int>& n_cell, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T3__, T4__, T5__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 5;
        validate_non_negative_index("lambda", "(nT * nR)", (nT * nR));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> lambda((nT * nR));
        stan::math::initialize(lambda, DUMMY_VAR__);
        stan::math::fill(lambda, DUMMY_VAR__);
        current_statement_begin__ = 6;
        validate_non_negative_index("u", "nS", nS);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u(nS);
        stan::math::initialize(u, DUMMY_VAR__);
        stan::math::fill(u, DUMMY_VAR__);
        current_statement_begin__ = 7;
        for (int t = 1; t <= nT; ++t) {
            current_statement_begin__ = 8;
            stan::math::assign(u, stan::model::rvalue(gamma, stan::model::cons_list(stan::model::index_min_max((((t - 1) * nS) + 1), (t * nS)), stan::model::nil_index_list()), "gamma"));
            current_statement_begin__ = 9;
            for (int r = 1; r <= nR; ++r) {
                {
                current_statement_begin__ = 10;
                int lsize(0);
                (void) lsize;  // dummy to suppress unused var warning
                stan::math::fill(lsize, std::numeric_limits<int>::min());
                stan::math::assign(lsize,(get_base1(n_cell, (r + 1), "n_cell", 1) - get_base1(n_cell, r, "n_cell", 1)));
                current_statement_begin__ = 11;
                validate_non_negative_index("idx", "lsize", lsize);
                std::vector<int  > idx(lsize, int(0));
                stan::math::fill(idx, std::numeric_limits<int>::min());
                current_statement_begin__ = 12;
                validate_non_negative_index("f", "lsize", lsize);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> f(lsize);
                stan::math::initialize(f, DUMMY_VAR__);
                stan::math::fill(f, DUMMY_VAR__);
                stan::math::assign(f,rep_vector(0, lsize));
                current_statement_begin__ = 13;
                for (int l = 1; l <= lsize; ++l) {
                    current_statement_begin__ = 14;
                    stan::model::assign(f, 
                                stan::model::cons_list(stan::model::index_uni(l), stan::model::nil_index_list()), 
                                get_base1(gamma, (get_base1(cell_id, ((get_base1(n_cell, r, "n_cell", 1) + l) - 1), "cell_id", 1) + ((t - 1) * nS)), "gamma", 1), 
                                "assigning variable f");
                }
                current_statement_begin__ = 16;
                stan::model::assign(lambda, 
                            stan::model::cons_list(stan::model::index_uni((((t - 1) * nR) + r)), stan::model::nil_index_list()), 
                            (stan::math::exp(get_base1(xb, (r + ((t - 1) * nR)), "xb", 1)) * multiply(transpose(stan::model::rvalue(w, stan::model::cons_list(stan::model::index_min_max(get_base1(n_cell, r, "n_cell", 1), (get_base1(n_cell, (r + 1), "n_cell", 1) - 1)), stan::model::nil_index_list()), "w")), stan::math::exp(f))), 
                            "assigning variable lambda");
                }
            }
        }
        current_statement_begin__ = 19;
        return stan::math::promote_scalar<fun_return_scalar_t__>(lambda);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct gen_lambda_functor__ {
    template <typename T3__, typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T3__, T4__, T5__>::type, Eigen::Dynamic, 1>
    operator()(const int& nT,
               const int& nR,
               const int& nS,
               const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& xb,
               const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& w,
               const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& gamma,
               const std::vector<int>& cell_id,
               const std::vector<int>& n_cell, std::ostream* pstream__) const {
        return gen_lambda(nT, nR, nS, xb, w, gamma, cell_id, n_cell, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_mcml_poisson_region
  : public stan::model::model_base_crtp<model_mcml_poisson_region> {
private:
        int N;
        int nT;
        int nRegion;
        int n_Q;
        vector_d Xb;
        matrix_d ZL;
        std::vector<int> y;
        std::vector<int> n_cell;
        std::vector<int> cell_id;
        vector_d q_weights;
public:
    model_mcml_poisson_region(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_mcml_poisson_region(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_mcml_poisson_region_namespace::model_mcml_poisson_region";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 23;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 24;
            context__.validate_dims("data initialization", "nT", "int", context__.to_vec());
            nT = int(0);
            vals_i__ = context__.vals_i("nT");
            pos__ = 0;
            nT = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "nRegion", "int", context__.to_vec());
            nRegion = int(0);
            vals_i__ = context__.vals_i("nRegion");
            pos__ = 0;
            nRegion = vals_i__[pos__++];
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "n_Q", "int", context__.to_vec());
            n_Q = int(0);
            vals_i__ = context__.vals_i("n_Q");
            pos__ = 0;
            n_Q = vals_i__[pos__++];
            current_statement_begin__ = 27;
            validate_non_negative_index("Xb", "(nRegion * nT)", (nRegion * nT));
            context__.validate_dims("data initialization", "Xb", "vector_d", context__.to_vec((nRegion * nT)));
            Xb = Eigen::Matrix<double, Eigen::Dynamic, 1>((nRegion * nT));
            vals_r__ = context__.vals_r("Xb");
            pos__ = 0;
            size_t Xb_j_1_max__ = (nRegion * nT);
            for (size_t j_1__ = 0; j_1__ < Xb_j_1_max__; ++j_1__) {
                Xb(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 28;
            validate_non_negative_index("ZL", "(N * nT)", (N * nT));
            validate_non_negative_index("ZL", "(N * nT)", (N * nT));
            context__.validate_dims("data initialization", "ZL", "matrix_d", context__.to_vec((N * nT),(N * nT)));
            ZL = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>((N * nT), (N * nT));
            vals_r__ = context__.vals_r("ZL");
            pos__ = 0;
            size_t ZL_j_2_max__ = (N * nT);
            size_t ZL_j_1_max__ = (N * nT);
            for (size_t j_2__ = 0; j_2__ < ZL_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < ZL_j_1_max__; ++j_1__) {
                    ZL(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 29;
            validate_non_negative_index("y", "(nRegion * nT)", (nRegion * nT));
            context__.validate_dims("data initialization", "y", "int", context__.to_vec((nRegion * nT)));
            y = std::vector<int>((nRegion * nT), int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = (nRegion * nT);
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 30;
            validate_non_negative_index("n_cell", "(nRegion + 1)", (nRegion + 1));
            context__.validate_dims("data initialization", "n_cell", "int", context__.to_vec((nRegion + 1)));
            n_cell = std::vector<int>((nRegion + 1), int(0));
            vals_i__ = context__.vals_i("n_cell");
            pos__ = 0;
            size_t n_cell_k_0_max__ = (nRegion + 1);
            for (size_t k_0__ = 0; k_0__ < n_cell_k_0_max__; ++k_0__) {
                n_cell[k_0__] = vals_i__[pos__++];
            }
            size_t n_cell_i_0_max__ = (nRegion + 1);
            for (size_t i_0__ = 0; i_0__ < n_cell_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_cell[i_0__]", n_cell[i_0__], 1);
            }
            current_statement_begin__ = 31;
            validate_non_negative_index("cell_id", "n_Q", n_Q);
            context__.validate_dims("data initialization", "cell_id", "int", context__.to_vec(n_Q));
            cell_id = std::vector<int>(n_Q, int(0));
            vals_i__ = context__.vals_i("cell_id");
            pos__ = 0;
            size_t cell_id_k_0_max__ = n_Q;
            for (size_t k_0__ = 0; k_0__ < cell_id_k_0_max__; ++k_0__) {
                cell_id[k_0__] = vals_i__[pos__++];
            }
            size_t cell_id_i_0_max__ = n_Q;
            for (size_t i_0__ = 0; i_0__ < cell_id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "cell_id[i_0__]", cell_id[i_0__], 1);
            }
            current_statement_begin__ = 32;
            validate_non_negative_index("q_weights", "n_Q", n_Q);
            context__.validate_dims("data initialization", "q_weights", "vector_d", context__.to_vec(n_Q));
            q_weights = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_Q);
            vals_r__ = context__.vals_r("q_weights");
            pos__ = 0;
            size_t q_weights_j_1_max__ = n_Q;
            for (size_t j_1__ = 0; j_1__ < q_weights_j_1_max__; ++j_1__) {
                q_weights(j_1__) = vals_r__[pos__++];
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 35;
            validate_non_negative_index("gamma", "(N * nT)", (N * nT));
            num_params_r__ += (N * nT);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_mcml_poisson_region() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 35;
        if (!(context__.contains_r("gamma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gamma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gamma");
        pos__ = 0U;
        validate_non_negative_index("gamma", "(N * nT)", (N * nT));
        context__.validate_dims("parameter initialization", "gamma", "vector_d", context__.to_vec((N * nT)));
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma((N * nT));
        size_t gamma_j_1_max__ = (N * nT);
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            gamma(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(gamma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gamma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 35;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> gamma;
            (void) gamma;  // dummy to suppress unused var warning
            if (jacobian__)
                gamma = in__.vector_constrain((N * nT), lp__);
            else
                gamma = in__.vector_constrain((N * nT));
            // model body
            {
            current_statement_begin__ = 38;
            validate_non_negative_index("u", "(N * nT)", (N * nT));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> u((N * nT));
            stan::math::initialize(u, DUMMY_VAR__);
            stan::math::fill(u, DUMMY_VAR__);
            stan::math::assign(u,multiply(ZL, gamma));
            current_statement_begin__ = 39;
            validate_non_negative_index("mu", "(nRegion * nT)", (nRegion * nT));
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu((nRegion * nT));
            stan::math::initialize(mu, DUMMY_VAR__);
            stan::math::fill(mu, DUMMY_VAR__);
            stan::math::assign(mu,gen_lambda(nT, nRegion, N, Xb, q_weights, u, cell_id, n_cell, pstream__));
            current_statement_begin__ = 40;
            lp_accum__.add(std_normal_log<propto__>(gamma));
            current_statement_begin__ = 41;
            lp_accum__.add(poisson_log<propto__>(y, mu));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("gamma");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((N * nT));
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mcml_poisson_region_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> gamma = in__.vector_constrain((N * nT));
        size_t gamma_j_1_max__ = (N * nT);
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            vars__.push_back(gamma(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_mcml_poisson_region";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t gamma_j_1_max__ = (N * nT);
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t gamma_j_1_max__ = (N * nT);
        for (size_t j_1__ = 0; j_1__ < gamma_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "gamma" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_mcml_poisson_region_namespace::model_mcml_poisson_region stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
