// Generated by rstantools.  Do not edit by hand.

/*
    rts2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rts2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rts2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_lgcp_region_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 84, column 2 to column 49)",
                                                      " (in 'string', line 85, column 2 to column 51)",
                                                      " (in 'string', line 86, column 2 to column 18)",
                                                      " (in 'string', line 87, column 2 to column 22)",
                                                      " (in 'string', line 88, column 2 to column 44)",
                                                      " (in 'string', line 89, column 2 to column 27)",
                                                      " (in 'string', line 92, column 2 to column 28)",
                                                      " (in 'string', line 93, column 2 to column 23)",
                                                      " (in 'string', line 94, column 2 to column 26)",
                                                      " (in 'string', line 95, column 2 to column 24)",
                                                      " (in 'string', line 100, column 4 to column 27)",
                                                      " (in 'string', line 101, column 4 to column 23)",
                                                      " (in 'string', line 99, column 9 to line 102, column 3)",
                                                      " (in 'string', line 97, column 4 to column 23)",
                                                      " (in 'string', line 98, column 4 to column 19)",
                                                      " (in 'string', line 96, column 15 to line 99, column 3)",
                                                      " (in 'string', line 96, column 2 to line 102, column 3)",
                                                      " (in 'string', line 107, column 4 to column 15)",
                                                      " (in 'string', line 106, column 9 to line 108, column 3)",
                                                      " (in 'string', line 105, column 4 to column 49)",
                                                      " (in 'string', line 104, column 17 to line 106, column 3)",
                                                      " (in 'string', line 104, column 2 to line 108, column 3)",
                                                      " (in 'string', line 118, column 6 to column 16)",
                                                      " (in 'string', line 117, column 11 to line 119, column 5)",
                                                      " (in 'string', line 115, column 8 to column 125)",
                                                      " (in 'string', line 114, column 13 to line 116, column 7)",
                                                      " (in 'string', line 113, column 8 to column 56)",
                                                      " (in 'string', line 112, column 14 to line 114, column 7)",
                                                      " (in 'string', line 112, column 6 to line 116, column 7)",
                                                      " (in 'string', line 111, column 12 to line 117, column 5)",
                                                      " (in 'string', line 111, column 4 to line 119, column 5)",
                                                      " (in 'string', line 110, column 16 to line 120, column 3)",
                                                      " (in 'string', line 110, column 2 to line 120, column 3)",
                                                      " (in 'string', line 122, column 4 to column 23)",
                                                      " (in 'string', line 121, column 13 to line 123, column 3)",
                                                      " (in 'string', line 121, column 2 to line 123, column 3)",
                                                      " (in 'string', line 163, column 2 to column 36)",
                                                      " (in 'string', line 164, column 2 to column 37)",
                                                      " (in 'string', line 167, column 4 to column 60)",
                                                      " (in 'string', line 166, column 26 to line 168, column 3)",
                                                      " (in 'string', line 166, column 2 to line 168, column 3)",
                                                      " (in 'string', line 170, column 3 to column 46)",
                                                      " (in 'string', line 174, column 8 to line 175, column 82)",
                                                      " (in 'string', line 173, column 41 to line 176, column 7)",
                                                      " (in 'string', line 173, column 6 to line 176, column 7)",
                                                      " (in 'string', line 172, column 18 to line 177, column 5)",
                                                      " (in 'string', line 172, column 4 to line 177, column 5)",
                                                      " (in 'string', line 171, column 22 to line 178, column 3)",
                                                      " (in 'string', line 171, column 2 to line 178, column 3)",
                                                      " (in 'string', line 126, column 9 to column 20)",
                                                      " (in 'string', line 126, column 2 to column 59)",
                                                      " (in 'string', line 127, column 9 to column 16)",
                                                      " (in 'string', line 127, column 2 to column 48)",
                                                      " (in 'string', line 129, column 4 to column 50)",
                                                      " (in 'string', line 130, column 4 to column 46)",
                                                      " (in 'string', line 128, column 16 to line 131, column 3)",
                                                      " (in 'string', line 128, column 2 to line 131, column 3)",
                                                      " (in 'string', line 132, column 12 to column 29)",
                                                      " (in 'string', line 132, column 2 to column 29)",
                                                      " (in 'string', line 134, column 4 to column 65)",
                                                      " (in 'string', line 133, column 15 to line 135, column 3)",
                                                      " (in 'string', line 133, column 2 to line 135, column 3)",
                                                      " (in 'string', line 137, column 4 to column 26)",
                                                      " (in 'string', line 136, column 13 to line 138, column 3)",
                                                      " (in 'string', line 136, column 2 to line 138, column 3)",
                                                      " (in 'string', line 147, column 6 to column 45)",
                                                      " (in 'string', line 146, column 11 to line 148, column 5)",
                                                      " (in 'string', line 144, column 8 to column 78)",
                                                      " (in 'string', line 143, column 13 to line 145, column 7)",
                                                      " (in 'string', line 142, column 8 to column 58)",
                                                      " (in 'string', line 141, column 14 to line 143, column 7)",
                                                      " (in 'string', line 141, column 6 to line 145, column 7)",
                                                      " (in 'string', line 140, column 12 to line 146, column 5)",
                                                      " (in 'string', line 140, column 4 to line 148, column 5)",
                                                      " (in 'string', line 139, column 16 to line 149, column 3)",
                                                      " (in 'string', line 139, column 2 to line 149, column 3)",
                                                      " (in 'string', line 154, column 8 to line 155, column 82)",
                                                      " (in 'string', line 153, column 41 to line 156, column 7)",
                                                      " (in 'string', line 153, column 6 to line 156, column 7)",
                                                      " (in 'string', line 152, column 18 to line 157, column 5)",
                                                      " (in 'string', line 152, column 4 to line 157, column 5)",
                                                      " (in 'string', line 151, column 22 to line 158, column 3)",
                                                      " (in 'string', line 151, column 2 to line 158, column 3)",
                                                      " (in 'string', line 160, column 2 to column 40)",
                                                      " (in 'string', line 44, column 2 to column 17)",
                                                      " (in 'string', line 45, column 2 to column 17)",
                                                      " (in 'string', line 46, column 2 to column 19)",
                                                      " (in 'string', line 47, column 2 to column 23)",
                                                      " (in 'string', line 48, column 2 to column 9)",
                                                      " (in 'string', line 49, column 2 to column 15)",
                                                      " (in 'string', line 50, column 2 to column 10)",
                                                      " (in 'string', line 51, column 22 to column 32)",
                                                      " (in 'string', line 51, column 2 to column 34)",
                                                      " (in 'string', line 52, column 23 to column 26)",
                                                      " (in 'string', line 52, column 2 to column 28)",
                                                      " (in 'string', line 53, column 9 to column 12)",
                                                      " (in 'string', line 53, column 2 to column 24)",
                                                      " (in 'string', line 55, column 8 to column 18)",
                                                      " (in 'string', line 55, column 2 to column 20)",
                                                      " (in 'string', line 56, column 9 to column 16)",
                                                      " (in 'string', line 56, column 17 to column 18)",
                                                      " (in 'string', line 56, column 2 to column 27)",
                                                      " (in 'string', line 57, column 9 to column 19)",
                                                      " (in 'string', line 57, column 2 to column 29)",
                                                      " (in 'string', line 58, column 9 to column 19)",
                                                      " (in 'string', line 58, column 20 to column 21)",
                                                      " (in 'string', line 58, column 2 to column 25)",
                                                      " (in 'string', line 59, column 9 to column 19)",
                                                      " (in 'string', line 59, column 20 to column 38)",
                                                      " (in 'string', line 59, column 2 to column 44)",
                                                      " (in 'string', line 60, column 2 to column 23)",
                                                      " (in 'string', line 61, column 2 to column 20)",
                                                      " (in 'string', line 62, column 26 to column 27)",
                                                      " (in 'string', line 62, column 2 to column 29)",
                                                      " (in 'string', line 63, column 24 to column 25)",
                                                      " (in 'string', line 63, column 2 to column 27)",
                                                      " (in 'string', line 64, column 2 to column 10)",
                                                      " (in 'string', line 65, column 2 to column 38)",
                                                      " (in 'string', line 66, column 2 to column 27)",
                                                      " (in 'string', line 67, column 2 to column 25)",
                                                      " (in 'string', line 70, column 9 to column 19)",
                                                      " (in 'string', line 70, column 2 to column 47)",
                                                      " (in 'string', line 71, column 9 to column 32)",
                                                      " (in 'string', line 71, column 34 to column 57)",
                                                      " (in 'string', line 71, column 2 to column 66)",
                                                      " (in 'string', line 72, column 13 to column 38)",
                                                      " (in 'string', line 72, column 2 to column 40)",
                                                      " (in 'string', line 75, column 6 to line 76, column 73)",
                                                      " (in 'string', line 74, column 27 to line 77, column 5)",
                                                      " (in 'string', line 74, column 4 to line 77, column 5)",
                                                      " (in 'string', line 73, column 25 to line 78, column 3)",
                                                      " (in 'string', line 73, column 2 to line 78, column 3)",
                                                      " (in 'string', line 80, column 4 to column 64)",
                                                      " (in 'string', line 79, column 15 to line 81, column 3)",
                                                      " (in 'string', line 79, column 2 to line 81, column 3)",
                                                      " (in 'string', line 84, column 30 to column 47)",
                                                      " (in 'string', line 85, column 32 to column 49)",
                                                      " (in 'string', line 86, column 9 to column 10)",
                                                      " (in 'string', line 87, column 9 to column 12)",
                                                      " (in 'string', line 88, column 28 to column 42)",
                                                      " (in 'string', line 89, column 9 to column 19)",
                                                      " (in 'string', line 92, column 9 to column 16)",
                                                      " (in 'string', line 92, column 17 to column 24)",
                                                      " (in 'string', line 93, column 9 to column 19)",
                                                      " (in 'string', line 163, column 9 to column 19)",
                                                      " (in 'string', line 164, column 9 to column 20)",
                                                      " (in 'string', line 3, column 11 to column 12)",
                                                      " (in 'string', line 3, column 13 to column 14)",
                                                      " (in 'string', line 3, column 4 to column 38)",
                                                      " (in 'string', line 4, column 4 to column 11)",
                                                      " (in 'string', line 5, column 4 to column 14)",
                                                      " (in 'string', line 6, column 4 to column 19)",
                                                      " (in 'string', line 7, column 4 to column 12)",
                                                      " (in 'string', line 10, column 6 to column 16)",
                                                      " (in 'string', line 11, column 6 to column 24)",
                                                      " (in 'string', line 15, column 8 to column 46)",
                                                      " (in 'string', line 14, column 14 to line 16, column 7)",
                                                      " (in 'string', line 13, column 8 to column 61)",
                                                      " (in 'string', line 12, column 18 to line 14, column 7)",
                                                      " (in 'string', line 12, column 6 to line 16, column 7)",
                                                      " (in 'string', line 9, column 17 to line 17, column 5)",
                                                      " (in 'string', line 9, column 4 to line 17, column 5)",
                                                      " (in 'string', line 19, column 6 to column 12)",
                                                      " (in 'string', line 21, column 8 to column 30)",
                                                      " (in 'string', line 20, column 23 to line 22, column 7)",
                                                      " (in 'string', line 20, column 6 to line 22, column 7)",
                                                      " (in 'string', line 23, column 6 to column 31)",
                                                      " (in 'string', line 26, column 10 to column 58)",
                                                      " (in 'string', line 27, column 10 to column 28)",
                                                      " (in 'string', line 28, column 10 to column 16)",
                                                      " (in 'string', line 30, column 12 to column 34)",
                                                      " (in 'string', line 29, column 27 to line 31, column 11)",
                                                      " (in 'string', line 29, column 10 to line 31, column 11)",
                                                      " (in 'string', line 35, column 12 to column 63)",
                                                      " (in 'string', line 34, column 18 to line 36, column 11)",
                                                      " (in 'string', line 33, column 12 to column 79)",
                                                      " (in 'string', line 32, column 22 to line 34, column 11)",
                                                      " (in 'string', line 32, column 10 to line 36, column 11)",
                                                      " (in 'string', line 25, column 25 to line 37, column 9)",
                                                      " (in 'string', line 25, column 8 to line 37, column 9)",
                                                      " (in 'string', line 24, column 15 to line 38, column 7)",
                                                      " (in 'string', line 24, column 6 to line 38, column 7)",
                                                      " (in 'string', line 18, column 17 to line 39, column 5)",
                                                      " (in 'string', line 18, column 4 to line 39, column 5)",
                                                      " (in 'string', line 40, column 4 to column 13)",
                                                      " (in 'string', line 2, column 70 to line 41, column 3)"};
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__,
T3__>, -1, -1>
genChol(const int& n, const T1__& alpha, const T2__& theta,
        const std::vector<T3__>& dists, const int& mod,
        std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__, T2__, T3__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 147;
    validate_non_negative_index("L", "n", n);
    current_statement__ = 148;
    validate_non_negative_index("L", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> L;
    L = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n);
    stan::math::fill(L, DUMMY_VAR__);
    
    current_statement__ = 149;
    assign(L, nil_index_list(), rep_matrix(0, n, n), "assigning variable L");
    local_scalar_t__ s;
    s = DUMMY_VAR__;
    
    local_scalar_t__ dist;
    dist = DUMMY_VAR__;
    
    current_statement__ = 152;
    assign(L,
      cons_list(index_uni(1), cons_list(index_uni(1), nil_index_list())),
      alpha, "assigning variable L");
    int idx;
    idx = std::numeric_limits<int>::min();
    
    current_statement__ = 162;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 154;
      idx = (i - 1);
      current_statement__ = 155;
      dist = dists[(idx - 1)];
      current_statement__ = 160;
      if (logical_eq(mod, 0)) {
        current_statement__ = 158;
        assign(L,
          cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
          (alpha *
            stan::math::exp(((-1.0 * (dist * dist)) / (theta * theta)))),
          "assigning variable L");
      } else {
        current_statement__ = 156;
        assign(L,
          cons_list(index_uni(i), cons_list(index_uni(1), nil_index_list())),
          (alpha * stan::math::exp(((-1.0 * dist) / theta))),
          "assigning variable L");
      }}
    current_statement__ = 184;
    for (int j = 2; j <= n; ++j) {
      current_statement__ = 163;
      s = 0;
      current_statement__ = 166;
      for (int k = 1; k <= (j - 1); ++k) {
        current_statement__ = 164;
        s = (s +
              (rvalue(L,
                 cons_list(index_uni(j),
                   cons_list(index_uni(k), nil_index_list())), "L") *
                rvalue(L,
                  cons_list(index_uni(j),
                    cons_list(index_uni(k), nil_index_list())), "L")));}
      current_statement__ = 167;
      assign(L,
        cons_list(index_uni(j), cons_list(index_uni(j), nil_index_list())),
        stan::math::sqrt((alpha - s)), "assigning variable L");
      current_statement__ = 182;
      if (logical_lt(j, n)) {
        current_statement__ = 180;
        for (int i = (j + 1); i <= n; ++i) {
          current_statement__ = 168;
          idx = (((((n - 1) * (j - 1)) - (((j - 2) * (j - 1)) / 2)) +
                   ((i - j) - 1)) + 1);
          current_statement__ = 169;
          dist = dists[(idx - 1)];
          current_statement__ = 170;
          s = 0;
          current_statement__ = 173;
          for (int k = 1; k <= (j - 1); ++k) {
            current_statement__ = 171;
            s = (s +
                  (rvalue(L,
                     cons_list(index_uni(j),
                       cons_list(index_uni(k), nil_index_list())), "L") *
                    rvalue(L,
                      cons_list(index_uni(i),
                        cons_list(index_uni(k), nil_index_list())), "L")));}
          current_statement__ = 178;
          if (logical_eq(mod, 0)) {
            current_statement__ = 176;
            assign(L,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((1 /
                 rvalue(L,
                   cons_list(index_uni(j),
                     cons_list(index_uni(j), nil_index_list())), "L")) *
                ((alpha *
                   stan::math::exp((-(dist * dist) / (theta * theta)))) - s)),
              "assigning variable L");
          } else {
            current_statement__ = 174;
            assign(L,
              cons_list(index_uni(i),
                cons_list(index_uni(j), nil_index_list())),
              ((1 /
                 rvalue(L,
                   cons_list(index_uni(j),
                     cons_list(index_uni(j), nil_index_list())), "L")) *
                ((alpha * stan::math::exp((-dist / theta))) - s)),
              "assigning variable L");
          }}
      } }
    current_statement__ = 185;
    return L;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct genChol_functor__ {
template <typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<T1__, T2__,
T3__>, -1, -1>
operator()(const int& n, const T1__& alpha, const T2__& theta,
           const std::vector<T3__>& dists, const int& mod,
           std::ostream* pstream__)  const 
{
return genChol(n, alpha, theta, dists, mod, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_lgcp_region final : public model_base_crtp<model_lgcp_region> {
private:
  int D;
  int Q;
  int Q_g;
  int Nsample;
  int nT;
  int n_region;
  int n_Q;
  std::vector<int> n_cell;
  std::vector<int> cell_id;
  Eigen::Matrix<double, -1, 1> q_weights;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x_grid;
  Eigen::Matrix<double, -1, 1> popdens;
  Eigen::Matrix<double, -1, -1> X;
  Eigen::Matrix<double, -1, -1> X_g;
  std::vector<double> prior_lscale;
  std::vector<double> prior_var;
  std::vector<double> prior_linpred_mean;
  std::vector<double> prior_linpred_sd;
  int mod;
  int known_cov;
  double sigma_data;
  double phi_data;
  Eigen::Matrix<double, -1, 1> logpopdens;
  Eigen::Matrix<double, -1, -1> L_data;
  std::vector<double> dists;
  int phi_param_1dim__;
  int sigma_param_1dim__;
  int ar_1dim__;
  int f_raw_1dim__;
  int f_1dim__;
  int y_grid_predict_1dim__;
  int region_predict_1dim__;
 
public:
  ~model_lgcp_region() { }
  
  inline std::string model_name() const final { return "model_lgcp_region"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_lgcp_region(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_lgcp_region_namespace::model_lgcp_region";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 85;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 85;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 85;
      current_statement__ = 85;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 86;
      context__.validate_dims("data initialization","Q","int",
          context__.to_vec());
      Q = std::numeric_limits<int>::min();
      
      current_statement__ = 86;
      Q = context__.vals_i("Q")[(1 - 1)];
      current_statement__ = 86;
      current_statement__ = 86;
      check_greater_or_equal(function__, "Q", Q, 1);
      current_statement__ = 87;
      context__.validate_dims("data initialization","Q_g","int",
          context__.to_vec());
      Q_g = std::numeric_limits<int>::min();
      
      current_statement__ = 87;
      Q_g = context__.vals_i("Q_g")[(1 - 1)];
      current_statement__ = 87;
      current_statement__ = 87;
      check_greater_or_equal(function__, "Q_g", Q_g, 0);
      current_statement__ = 88;
      context__.validate_dims("data initialization","Nsample","int",
          context__.to_vec());
      Nsample = std::numeric_limits<int>::min();
      
      current_statement__ = 88;
      Nsample = context__.vals_i("Nsample")[(1 - 1)];
      current_statement__ = 88;
      current_statement__ = 88;
      check_greater_or_equal(function__, "Nsample", Nsample, 1);
      current_statement__ = 89;
      context__.validate_dims("data initialization","nT","int",
          context__.to_vec());
      nT = std::numeric_limits<int>::min();
      
      current_statement__ = 89;
      nT = context__.vals_i("nT")[(1 - 1)];
      current_statement__ = 90;
      context__.validate_dims("data initialization","n_region","int",
          context__.to_vec());
      n_region = std::numeric_limits<int>::min();
      
      current_statement__ = 90;
      n_region = context__.vals_i("n_region")[(1 - 1)];
      current_statement__ = 91;
      context__.validate_dims("data initialization","n_Q","int",
          context__.to_vec());
      n_Q = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      n_Q = context__.vals_i("n_Q")[(1 - 1)];
      current_statement__ = 92;
      validate_non_negative_index("n_cell", "n_region + 1", (n_region + 1));
      current_statement__ = 93;
      context__.validate_dims("data initialization","n_cell","int",
          context__.to_vec((n_region + 1)));
      n_cell = std::vector<int>((n_region + 1), std::numeric_limits<int>::min());
      
      current_statement__ = 93;
      assign(n_cell, nil_index_list(), context__.vals_i("n_cell"),
        "assigning variable n_cell");
      current_statement__ = 93;
      for (int sym1__ = 1; sym1__ <= (n_region + 1); ++sym1__) {
        current_statement__ = 93;
        current_statement__ = 93;
        check_greater_or_equal(function__, "n_cell[sym1__]",
                               n_cell[(sym1__ - 1)], 1);}
      current_statement__ = 94;
      validate_non_negative_index("cell_id", "n_Q", n_Q);
      current_statement__ = 95;
      context__.validate_dims("data initialization","cell_id","int",
          context__.to_vec(n_Q));
      cell_id = std::vector<int>(n_Q, std::numeric_limits<int>::min());
      
      current_statement__ = 95;
      assign(cell_id, nil_index_list(), context__.vals_i("cell_id"),
        "assigning variable cell_id");
      current_statement__ = 95;
      for (int sym1__ = 1; sym1__ <= n_Q; ++sym1__) {
        current_statement__ = 95;
        current_statement__ = 95;
        check_greater_or_equal(function__, "cell_id[sym1__]",
                               cell_id[(sym1__ - 1)], 1);}
      current_statement__ = 96;
      validate_non_negative_index("q_weights", "n_Q", n_Q);
      current_statement__ = 97;
      context__.validate_dims("data initialization","q_weights","double",
          context__.to_vec(n_Q));
      q_weights = Eigen::Matrix<double, -1, 1>(n_Q);
      stan::math::fill(q_weights, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> q_weights_flat__;
        current_statement__ = 97;
        assign(q_weights_flat__, nil_index_list(),
          context__.vals_r("q_weights"),
          "assigning variable q_weights_flat__");
        current_statement__ = 97;
        pos__ = 1;
        current_statement__ = 97;
        for (int sym1__ = 1; sym1__ <= n_Q; ++sym1__) {
          current_statement__ = 97;
          assign(q_weights, cons_list(index_uni(sym1__), nil_index_list()),
            q_weights_flat__[(pos__ - 1)], "assigning variable q_weights");
          current_statement__ = 97;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 98;
      validate_non_negative_index("y", "Nsample * nT", (Nsample * nT));
      current_statement__ = 99;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec((Nsample * nT)));
      y = std::vector<int>((Nsample * nT), std::numeric_limits<int>::min());
      
      current_statement__ = 99;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 100;
      validate_non_negative_index("x_grid", "Nsample", Nsample);
      current_statement__ = 101;
      validate_non_negative_index("x_grid", "D", D);
      current_statement__ = 102;
      context__.validate_dims("data initialization","x_grid","double",
          context__.to_vec(Nsample, D));
      x_grid = Eigen::Matrix<double, -1, -1>(Nsample, D);
      stan::math::fill(x_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_grid_flat__;
        current_statement__ = 102;
        assign(x_grid_flat__, nil_index_list(), context__.vals_r("x_grid"),
          "assigning variable x_grid_flat__");
        current_statement__ = 102;
        pos__ = 1;
        current_statement__ = 102;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 102;
          for (int sym2__ = 1; sym2__ <= Nsample; ++sym2__) {
            current_statement__ = 102;
            assign(x_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_grid_flat__[(pos__ - 1)], "assigning variable x_grid");
            current_statement__ = 102;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 103;
      validate_non_negative_index("popdens", "Nsample * nT", (Nsample * nT));
      current_statement__ = 104;
      context__.validate_dims("data initialization","popdens","double",
          context__.to_vec((Nsample * nT)));
      popdens = Eigen::Matrix<double, -1, 1>((Nsample * nT));
      stan::math::fill(popdens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> popdens_flat__;
        current_statement__ = 104;
        assign(popdens_flat__, nil_index_list(), context__.vals_r("popdens"),
          "assigning variable popdens_flat__");
        current_statement__ = 104;
        pos__ = 1;
        current_statement__ = 104;
        for (int sym1__ = 1; sym1__ <= (Nsample * nT); ++sym1__) {
          current_statement__ = 104;
          assign(popdens, cons_list(index_uni(sym1__), nil_index_list()),
            popdens_flat__[(pos__ - 1)], "assigning variable popdens");
          current_statement__ = 104;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 105;
      validate_non_negative_index("X", "Nsample * nT", (Nsample * nT));
      current_statement__ = 106;
      validate_non_negative_index("X", "Q", Q);
      current_statement__ = 107;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec((Nsample * nT), Q));
      X = Eigen::Matrix<double, -1, -1>((Nsample * nT), Q);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 107;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 107;
        pos__ = 1;
        current_statement__ = 107;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 107;
          for (int sym2__ = 1; sym2__ <= (Nsample * nT); ++sym2__) {
            current_statement__ = 107;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 107;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 108;
      validate_non_negative_index("X_g", "Nsample * nT", (Nsample * nT));
      current_statement__ = 109;
      validate_non_negative_index("X_g", "Q_g == 0 ? 1 : Q_g",
                                  (logical_eq(Q_g, 0) ? 1 : Q_g));
      current_statement__ = 110;
      context__.validate_dims("data initialization","X_g","double",
          context__.to_vec((Nsample * nT), (logical_eq(Q_g, 0) ? 1 : Q_g)));
      X_g = Eigen::Matrix<double, -1, -1>((Nsample * nT), (logical_eq(Q_g, 0)
                                                             ? 1 : Q_g));
      stan::math::fill(X_g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_g_flat__;
        current_statement__ = 110;
        assign(X_g_flat__, nil_index_list(), context__.vals_r("X_g"),
          "assigning variable X_g_flat__");
        current_statement__ = 110;
        pos__ = 1;
        current_statement__ = 110;
        for (int sym1__ = 1; sym1__ <= (logical_eq(Q_g, 0) ? 1 : Q_g);
             ++sym1__) {
          current_statement__ = 110;
          for (int sym2__ = 1; sym2__ <= (Nsample * nT); ++sym2__) {
            current_statement__ = 110;
            assign(X_g,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_g_flat__[(pos__ - 1)], "assigning variable X_g");
            current_statement__ = 110;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 111;
      context__.validate_dims("data initialization","prior_lscale","double",
          context__.to_vec(2));
      prior_lscale = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 111;
      assign(prior_lscale, nil_index_list(),
        context__.vals_r("prior_lscale"), "assigning variable prior_lscale");
      current_statement__ = 112;
      context__.validate_dims("data initialization","prior_var","double",
          context__.to_vec(2));
      prior_var = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 112;
      assign(prior_var, nil_index_list(), context__.vals_r("prior_var"),
        "assigning variable prior_var");
      current_statement__ = 113;
      validate_non_negative_index("prior_linpred_mean", "Q", Q);
      current_statement__ = 114;
      context__.validate_dims("data initialization","prior_linpred_mean",
          "double",context__.to_vec(Q));
      prior_linpred_mean = std::vector<double>(Q, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 114;
      assign(prior_linpred_mean, nil_index_list(),
        context__.vals_r("prior_linpred_mean"),
        "assigning variable prior_linpred_mean");
      current_statement__ = 115;
      validate_non_negative_index("prior_linpred_sd", "Q", Q);
      current_statement__ = 116;
      context__.validate_dims("data initialization","prior_linpred_sd",
          "double",context__.to_vec(Q));
      prior_linpred_sd = std::vector<double>(Q, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 116;
      assign(prior_linpred_sd, nil_index_list(),
        context__.vals_r("prior_linpred_sd"),
        "assigning variable prior_linpred_sd");
      current_statement__ = 117;
      context__.validate_dims("data initialization","mod","int",
          context__.to_vec());
      mod = std::numeric_limits<int>::min();
      
      current_statement__ = 117;
      mod = context__.vals_i("mod")[(1 - 1)];
      current_statement__ = 118;
      context__.validate_dims("data initialization","known_cov","int",
          context__.to_vec());
      known_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 118;
      known_cov = context__.vals_i("known_cov")[(1 - 1)];
      current_statement__ = 118;
      current_statement__ = 118;
      check_greater_or_equal(function__, "known_cov", known_cov, 0);
      current_statement__ = 118;
      current_statement__ = 118;
      check_less_or_equal(function__, "known_cov", known_cov, 1);
      current_statement__ = 119;
      context__.validate_dims("data initialization","sigma_data","double",
          context__.to_vec());
      sigma_data = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 119;
      sigma_data = context__.vals_r("sigma_data")[(1 - 1)];
      current_statement__ = 119;
      current_statement__ = 119;
      check_greater_or_equal(function__, "sigma_data", sigma_data, 0);
      current_statement__ = 120;
      context__.validate_dims("data initialization","phi_data","double",
          context__.to_vec());
      phi_data = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 120;
      phi_data = context__.vals_r("phi_data")[(1 - 1)];
      current_statement__ = 120;
      current_statement__ = 120;
      check_greater_or_equal(function__, "phi_data", phi_data, 0);
      current_statement__ = 121;
      validate_non_negative_index("logpopdens", "Nsample * nT",
                                  (Nsample * nT));
      current_statement__ = 122;
      logpopdens = Eigen::Matrix<double, -1, 1>((Nsample * nT));
      stan::math::fill(logpopdens, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 122;
      assign(logpopdens, nil_index_list(), stan::math::log(popdens),
        "assigning variable logpopdens");
      current_statement__ = 123;
      validate_non_negative_index("L_data", "known_cov ? Nsample : 0",
                                  (known_cov ? Nsample : 0));
      current_statement__ = 124;
      validate_non_negative_index("L_data", "known_cov ? Nsample : 0",
                                  (known_cov ? Nsample : 0));
      current_statement__ = 125;
      L_data = Eigen::Matrix<double, -1, -1>((known_cov ? Nsample : 0), (
        known_cov ? Nsample : 0));
      stan::math::fill(L_data, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 126;
      validate_non_negative_index("dists", "(Nsample * (Nsample - 1)) %/% 2",
                                  ((Nsample * (Nsample - 1)) / 2));
      current_statement__ = 127;
      dists = std::vector<double>(((Nsample * (Nsample - 1)) / 2), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 132;
      for (int i = 1; i <= (Nsample - 1); ++i) {
        current_statement__ = 130;
        for (int j = (i + 1); j <= Nsample; ++j) {
          current_statement__ = 128;
          assign(dists,
            cons_list(
              index_uni((((((Nsample - 1) * (i - 1)) -
                            (((i - 2) * (i - 1)) / 2)) + ((j - i) - 1)) + 1)),
              nil_index_list()),
            stan::math::sqrt(
              (((rvalue(x_grid,
                   cons_list(index_uni(i),
                     cons_list(index_uni(1), nil_index_list())), "x_grid") -
                  rvalue(x_grid,
                    cons_list(index_uni(j),
                      cons_list(index_uni(1), nil_index_list())), "x_grid"))
                 *
                 (rvalue(x_grid,
                    cons_list(index_uni(i),
                      cons_list(index_uni(1), nil_index_list())), "x_grid") -
                   rvalue(x_grid,
                     cons_list(index_uni(j),
                       cons_list(index_uni(1), nil_index_list())), "x_grid")))
                +
                ((rvalue(x_grid,
                    cons_list(index_uni(i),
                      cons_list(index_uni(2), nil_index_list())), "x_grid") -
                   rvalue(x_grid,
                     cons_list(index_uni(j),
                       cons_list(index_uni(2), nil_index_list())), "x_grid"))
                  *
                  (rvalue(x_grid,
                     cons_list(index_uni(i),
                       cons_list(index_uni(2), nil_index_list())), "x_grid")
                    -
                    rvalue(x_grid,
                      cons_list(index_uni(j),
                        cons_list(index_uni(2), nil_index_list())), "x_grid"))))),
            "assigning variable dists");}}
      current_statement__ = 135;
      if (known_cov) {
        current_statement__ = 133;
        assign(L_data, nil_index_list(),
          genChol(Nsample, sigma_data, phi_data, dists, mod, pstream__),
          "assigning variable L_data");
      } 
      current_statement__ = 136;
      phi_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 136;
      phi_param_1dim__ = (known_cov ? 0 : 1);
      current_statement__ = 136;
      validate_non_negative_index("phi_param", "known_cov ? 0 : 1",
                                  phi_param_1dim__);
      current_statement__ = 137;
      sigma_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 137;
      sigma_param_1dim__ = (known_cov ? 0 : 1);
      current_statement__ = 137;
      validate_non_negative_index("sigma_param", "known_cov ? 0 : 1",
                                  sigma_param_1dim__);
      current_statement__ = 138;
      validate_non_negative_index("gamma", "Q", Q);
      current_statement__ = 139;
      validate_non_negative_index("gamma_g", "Q_g", Q_g);
      current_statement__ = 140;
      ar_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 140;
      ar_1dim__ = (logical_gt(nT, 1) ? 0 : 1);
      current_statement__ = 140;
      validate_non_negative_index("ar", "nT > 1 ? 0 : 1", ar_1dim__);
      current_statement__ = 141;
      f_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 141;
      f_raw_1dim__ = (Nsample * nT);
      current_statement__ = 141;
      validate_non_negative_index("f_raw", "Nsample * nT", f_raw_1dim__);
      current_statement__ = 142;
      validate_non_negative_index("L", "Nsample", Nsample);
      current_statement__ = 143;
      validate_non_negative_index("L", "Nsample", Nsample);
      current_statement__ = 144;
      f_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 144;
      f_1dim__ = (Nsample * nT);
      current_statement__ = 144;
      validate_non_negative_index("f", "Nsample * nT", f_1dim__);
      current_statement__ = 145;
      y_grid_predict_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 145;
      y_grid_predict_1dim__ = (Nsample * nT);
      current_statement__ = 145;
      validate_non_negative_index("y_grid_predict", "Nsample * nT",
                                  y_grid_predict_1dim__);
      current_statement__ = 146;
      region_predict_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 146;
      region_predict_1dim__ = (n_region * nT);
      current_statement__ = 146;
      validate_non_negative_index("region_predict", "n_region * nT",
                                  region_predict_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += phi_param_1dim__;
      num_params_r__ += sigma_param_1dim__;
      num_params_r__ += Q;
      num_params_r__ += Q_g;
      num_params_r__ += ar_1dim__;
      num_params_r__ += f_raw_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_lgcp_region_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> phi_param;
      phi_param = std::vector<local_scalar_t__>(phi_param_1dim__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi_param");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05, lp__),
            "assigning variable phi_param");
        } else {
          current_statement__ = 1;
          assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05),
            "assigning variable phi_param");
        }}
      std::vector<local_scalar_t__> sigma_param;
      sigma_param = std::vector<local_scalar_t__>(sigma_param_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_param");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05, lp__),
            "assigning variable sigma_param");
        } else {
          current_statement__ = 2;
          assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05),
            "assigning variable sigma_param");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(Q);
      stan::math::fill(gamma, DUMMY_VAR__);
      
      current_statement__ = 3;
      gamma = in__.vector(Q);
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma_g;
      gamma_g = Eigen::Matrix<local_scalar_t__, -1, 1>(Q_g);
      stan::math::fill(gamma_g, DUMMY_VAR__);
      
      current_statement__ = 4;
      gamma_g = in__.vector(Q_g);
      std::vector<local_scalar_t__> ar;
      ar = std::vector<local_scalar_t__>(ar_1dim__, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ar");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(ar[(sym1__ - 1)], -1, 1, lp__),
            "assigning variable ar");
        } else {
          current_statement__ = 5;
          assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(ar[(sym1__ - 1)], -1, 1),
            "assigning variable ar");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> f_raw;
      f_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(f_raw_1dim__);
      stan::math::fill(f_raw, DUMMY_VAR__);
      
      current_statement__ = 6;
      f_raw = in__.vector(f_raw_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> L;
      L = Eigen::Matrix<local_scalar_t__, -1, -1>(Nsample, Nsample);
      stan::math::fill(L, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> f;
      f = Eigen::Matrix<local_scalar_t__, -1, 1>(f_1dim__);
      stan::math::fill(f, DUMMY_VAR__);
      
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 17;
      if (known_cov) {
        current_statement__ = 14;
        sigma = sigma_data;
        current_statement__ = 15;
        phi = phi_data;
      } else {
        current_statement__ = 11;
        sigma = sigma_param[(1 - 1)];
        current_statement__ = 12;
        phi = phi_param[(1 - 1)];
      }
      current_statement__ = 22;
      if (logical_negation(known_cov)) {
        current_statement__ = 20;
        assign(L, nil_index_list(),
          genChol(Nsample, sigma, phi, dists, mod, pstream__),
          "assigning variable L");
      } else {
        current_statement__ = 18;
        assign(L, nil_index_list(), L_data, "assigning variable L");
      }
      current_statement__ = 33;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 31;
        if (logical_gt(nT, 1)) {
          current_statement__ = 29;
          if (logical_eq(t, 1)) {
            current_statement__ = 27;
            assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
              multiply((1 / (1 - pow(ar[(1 - 1)], 2))),
                rvalue(f_raw,
                  cons_list(index_min_max(1, Nsample), nil_index_list()),
                  "f_raw")), "assigning variable f");
          } else {
            current_statement__ = 25;
            assign(f,
              cons_list(
                index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                nil_index_list()),
              add(
                multiply(ar[(1 - 1)],
                  stan::model::deep_copy(
                    rvalue(f,
                      cons_list(
                        index_min_max(((Nsample * (t - 2)) + 1), ((t - 1) *
                                                                   Nsample)),
                        nil_index_list()), "f"))),
                rvalue(f_raw,
                  cons_list(
                    index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                    nil_index_list()), "f_raw")), "assigning variable f");
          }
        } else {
          current_statement__ = 23;
          assign(f, nil_index_list(), f_raw, "assigning variable f");
        }}
      current_statement__ = 36;
      if (logical_gt(Q_g, 0)) {
        current_statement__ = 34;
        assign(f, nil_index_list(),
          add(stan::model::deep_copy(f), multiply(X_g, gamma_g)),
          "assigning variable f");
      } 
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma", sigma, 1e-05);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "phi", phi, 1e-05);
      {
        current_statement__ = 50;
        validate_non_negative_index("lambda_r", "n_region * nT",
                                    (n_region * nT));
        Eigen::Matrix<local_scalar_t__, -1, 1> lambda_r;
        lambda_r = Eigen::Matrix<local_scalar_t__, -1, 1>((n_region * nT));
        stan::math::fill(lambda_r, DUMMY_VAR__);
        
        current_statement__ = 51;
        assign(lambda_r, nil_index_list(), rep_vector(0, (n_region * nT)),
          "assigning variable lambda_r");
        current_statement__ = 52;
        validate_non_negative_index("zeros", "Nsample", Nsample);
        Eigen::Matrix<local_scalar_t__, -1, 1> zeros;
        zeros = Eigen::Matrix<local_scalar_t__, -1, 1>(Nsample);
        stan::math::fill(zeros, DUMMY_VAR__);
        
        current_statement__ = 53;
        assign(zeros, nil_index_list(), rep_vector(0, Nsample),
          "assigning variable zeros");
        current_statement__ = 57;
        if (logical_negation(known_cov)) {
          current_statement__ = 54;
          lp_accum__.add(
            normal_lpdf<propto__>(phi, prior_lscale[(1 - 1)],
              prior_lscale[(2 - 1)]));
          current_statement__ = 55;
          lp_accum__.add(
            normal_lpdf<propto__>(sigma, prior_var[(1 - 1)],
              prior_var[(2 - 1)]));
        } 
        current_statement__ = 59;
        if (logical_gt(nT, 1)) {
          current_statement__ = 58;
          lp_accum__.add(normal_lpdf<propto__>(ar, 0, 1));
        } 
        current_statement__ = 62;
        for (int q = 1; q <= Q; ++q) {
          current_statement__ = 60;
          lp_accum__.add(
            normal_lpdf<propto__>(gamma[(q - 1)],
              prior_linpred_mean[(q - 1)], prior_linpred_sd[(q - 1)]));}
        current_statement__ = 65;
        if (logical_gt(Q_g, 0)) {
          current_statement__ = 63;
          lp_accum__.add(normal_lpdf<propto__>(gamma_g, 0, 2));
        } 
        current_statement__ = 76;
        for (int t = 1; t <= nT; ++t) {
          current_statement__ = 74;
          if (logical_gt(nT, 1)) {
            current_statement__ = 72;
            if (logical_eq(t, 1)) {
              current_statement__ = 70;
              lp_accum__.add(
                multi_normal_cholesky_lpdf<propto__>(
                  rvalue(f_raw,
                    cons_list(index_min_max(1, Nsample), nil_index_list()),
                    "f_raw"), zeros, L));
            } else {
              current_statement__ = 68;
              lp_accum__.add(
                multi_normal_cholesky_lpdf<propto__>(
                  rvalue(f_raw,
                    cons_list(
                      index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                      nil_index_list()), "f_raw"), zeros, L));
            }
          } else {
            current_statement__ = 66;
            lp_accum__.add(
              multi_normal_cholesky_lpdf<propto__>(f_raw, zeros, L));
          }}
        current_statement__ = 83;
        for (int r = 1; r <= n_region; ++r) {
          current_statement__ = 81;
          for (int t = 1; t <= nT; ++t) {
            current_statement__ = 79;
            for (int l = 1; l <= (n_cell[((r + 1) - 1)] - n_cell[(r - 1)]);
                 ++l) {
              current_statement__ = 77;
              assign(lambda_r,
                cons_list(index_uni((r + ((t - 1) * n_region))),
                  nil_index_list()),
                (lambda_r[((r + ((t - 1) * n_region)) - 1)] +
                  (((popdens[((r + ((t - 1) * n_region)) - 1)] *
                      stan::math::exp(
                        multiply(
                          rvalue(X,
                            cons_list(index_uni((r + ((t - 1) * n_region))),
                              cons_list(index_omni(), nil_index_list())),
                            "X"), gamma))) *
                     q_weights[(((n_cell[(r - 1)] + l) - 1) - 1)]) *
                    stan::math::exp(
                      f[((cell_id[(((n_cell[(r - 1)] + l) - 1) - 1)] +
                           ((t - 1) * Nsample)) - 1)]))),
                "assigning variable lambda_r");}}}
        current_statement__ = 84;
        lp_accum__.add(
          poisson_log_lpmf<propto__>(y,
            add(add(multiply(X, gamma), logpopdens), f)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_lgcp_region_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> phi_param;
      phi_param = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi_param");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05),
          "assigning variable phi_param");}
      std::vector<double> sigma_param;
      sigma_param = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_param");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05),
          "assigning variable sigma_param");}
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      gamma = in__.vector(Q);
      Eigen::Matrix<double, -1, 1> gamma_g;
      gamma_g = Eigen::Matrix<double, -1, 1>(Q_g);
      stan::math::fill(gamma_g, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      gamma_g = in__.vector(Q_g);
      std::vector<double> ar;
      ar = std::vector<double>(ar_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ar");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(ar[(sym1__ - 1)], -1, 1),
          "assigning variable ar");}
      Eigen::Matrix<double, -1, 1> f_raw;
      f_raw = Eigen::Matrix<double, -1, 1>(f_raw_1dim__);
      stan::math::fill(f_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      f_raw = in__.vector(f_raw_1dim__);
      Eigen::Matrix<double, -1, -1> L;
      L = Eigen::Matrix<double, -1, -1>(Nsample, Nsample);
      stan::math::fill(L, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(f_1dim__);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        vars__.emplace_back(phi_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q_g; ++sym1__) {
        vars__.emplace_back(gamma_g[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        vars__.emplace_back(ar[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
        vars__.emplace_back(f_raw[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 17;
      if (known_cov) {
        current_statement__ = 14;
        sigma = sigma_data;
        current_statement__ = 15;
        phi = phi_data;
      } else {
        current_statement__ = 11;
        sigma = sigma_param[(1 - 1)];
        current_statement__ = 12;
        phi = phi_param[(1 - 1)];
      }
      current_statement__ = 22;
      if (logical_negation(known_cov)) {
        current_statement__ = 20;
        assign(L, nil_index_list(),
          genChol(Nsample, sigma, phi, dists, mod, pstream__),
          "assigning variable L");
      } else {
        current_statement__ = 18;
        assign(L, nil_index_list(), L_data, "assigning variable L");
      }
      current_statement__ = 33;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 31;
        if (logical_gt(nT, 1)) {
          current_statement__ = 29;
          if (logical_eq(t, 1)) {
            current_statement__ = 27;
            assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
              multiply((1 / (1 - pow(ar[(1 - 1)], 2))),
                rvalue(f_raw,
                  cons_list(index_min_max(1, Nsample), nil_index_list()),
                  "f_raw")), "assigning variable f");
          } else {
            current_statement__ = 25;
            assign(f,
              cons_list(
                index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                nil_index_list()),
              add(
                multiply(ar[(1 - 1)],
                  stan::model::deep_copy(
                    rvalue(f,
                      cons_list(
                        index_min_max(((Nsample * (t - 2)) + 1), ((t - 1) *
                                                                   Nsample)),
                        nil_index_list()), "f"))),
                rvalue(f_raw,
                  cons_list(
                    index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                    nil_index_list()), "f_raw")), "assigning variable f");
          }
        } else {
          current_statement__ = 23;
          assign(f, nil_index_list(), f_raw, "assigning variable f");
        }}
      current_statement__ = 36;
      if (logical_gt(Q_g, 0)) {
        current_statement__ = 34;
        assign(f, nil_index_list(),
          add(stan::model::deep_copy(f), multiply(X_g, gamma_g)),
          "assigning variable f");
      } 
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma", sigma, 1e-05);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "phi", phi, 1e-05);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= Nsample; ++sym2__) {
            vars__.emplace_back(
              rvalue(L,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "L"));}}
        for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
          vars__.emplace_back(f[(sym1__ - 1)]);}
        vars__.emplace_back(sigma);
        vars__.emplace_back(phi);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y_grid_predict;
      y_grid_predict = Eigen::Matrix<double, -1, 1>(y_grid_predict_1dim__);
      stan::math::fill(y_grid_predict, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> region_predict;
      region_predict = Eigen::Matrix<double, -1, 1>(region_predict_1dim__);
      stan::math::fill(region_predict, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 41;
      for (int i = 1; i <= (Nsample * nT); ++i) {
        current_statement__ = 39;
        assign(y_grid_predict, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            ((multiply(
                rvalue(X,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "X"), gamma)
               + logpopdens[(i - 1)]) + f[(i - 1)])),
          "assigning variable y_grid_predict");}
      current_statement__ = 42;
      assign(region_predict, nil_index_list(),
        rep_vector(0, (n_region * nT)), "assigning variable region_predict");
      current_statement__ = 49;
      for (int r = 1; r <= n_region; ++r) {
        current_statement__ = 47;
        for (int t = 1; t <= nT; ++t) {
          current_statement__ = 45;
          for (int l = 1; l <= (n_cell[((r + 1) - 1)] - n_cell[(r - 1)]); ++l) {
            current_statement__ = 43;
            assign(region_predict,
              cons_list(index_uni((r + ((t - 1) * n_region))),
                nil_index_list()),
              (region_predict[((r + ((t - 1) * n_region)) - 1)] +
                (((popdens[((r + ((t - 1) * n_region)) - 1)] *
                    stan::math::exp(
                      multiply(
                        rvalue(X,
                          cons_list(index_uni((r + ((t - 1) * n_region))),
                            cons_list(index_omni(), nil_index_list())), "X"),
                        gamma))) *
                   q_weights[(((n_cell[(r - 1)] + l) - 1) - 1)]) *
                  stan::math::exp(
                    f[((cell_id[(((n_cell[(r - 1)] + l) - 1) - 1)] +
                         ((t - 1) * Nsample)) - 1)]))),
              "assigning variable region_predict");}}}
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        vars__.emplace_back(y_grid_predict[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= region_predict_1dim__; ++sym1__) {
        vars__.emplace_back(region_predict[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> phi_param;
      phi_param = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(phi_param, nil_index_list(), context__.vals_r("phi_param"),
        "assigning variable phi_param");
      std::vector<double> phi_param_free__;
      phi_param_free__ = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(phi_param[(sym1__ - 1)], 1e-05),
          "assigning variable phi_param_free__");}
      std::vector<double> sigma_param;
      sigma_param = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(sigma_param, nil_index_list(), context__.vals_r("sigma_param"),
        "assigning variable sigma_param");
      std::vector<double> sigma_param_free__;
      sigma_param_free__ = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_param[(sym1__ - 1)], 1e-05),
          "assigning variable sigma_param_free__");}
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 3;
        assign(gamma_flat__, nil_index_list(), context__.vals_r("gamma"),
          "assigning variable gamma_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 3;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_flat__[(pos__ - 1)], "assigning variable gamma");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> gamma_g;
      gamma_g = Eigen::Matrix<double, -1, 1>(Q_g);
      stan::math::fill(gamma_g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_g_flat__;
        current_statement__ = 4;
        assign(gamma_g_flat__, nil_index_list(), context__.vals_r("gamma_g"),
          "assigning variable gamma_g_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Q_g; ++sym1__) {
          current_statement__ = 4;
          assign(gamma_g, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_g_flat__[(pos__ - 1)], "assigning variable gamma_g");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> ar;
      ar = std::vector<double>(ar_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(ar, nil_index_list(), context__.vals_r("ar"),
        "assigning variable ar");
      std::vector<double> ar_free__;
      ar_free__ = std::vector<double>(ar_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(ar[(sym1__ - 1)], -1, 1),
          "assigning variable ar_free__");}
      Eigen::Matrix<double, -1, 1> f_raw;
      f_raw = Eigen::Matrix<double, -1, 1>(f_raw_1dim__);
      stan::math::fill(f_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> f_raw_flat__;
        current_statement__ = 6;
        assign(f_raw_flat__, nil_index_list(), context__.vals_r("f_raw"),
          "assigning variable f_raw_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
          current_statement__ = 6;
          assign(f_raw, cons_list(index_uni(sym1__), nil_index_list()),
            f_raw_flat__[(pos__ - 1)], "assigning variable f_raw");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        vars__.emplace_back(phi_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q_g; ++sym1__) {
        vars__.emplace_back(gamma_g[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        vars__.emplace_back(ar_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
        vars__.emplace_back(f_raw[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("phi_param");
    names__.emplace_back("sigma_param");
    names__.emplace_back("gamma");
    names__.emplace_back("gamma_g");
    names__.emplace_back("ar");
    names__.emplace_back("f_raw");
    names__.emplace_back("L");
    names__.emplace_back("f");
    names__.emplace_back("sigma");
    names__.emplace_back("phi");
    names__.emplace_back("y_grid_predict");
    names__.emplace_back("region_predict");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(phi_param_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_param_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q_g)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ar_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(f_raw_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Nsample),
                                             static_cast<size_t>(Nsample)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(f_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_grid_predict_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(region_predict_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q_g; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_g" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ar" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "f_raw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nsample; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "phi");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_grid_predict" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= region_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "region_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q_g; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma_g" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ar" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "f_raw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= Nsample; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "L" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "phi");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_grid_predict" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= region_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "region_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"phi_param\",\"type\":{\"name\":\"array\",\"length\":" << phi_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_param\",\"type\":{\"name\":\"array\",\"length\":" << sigma_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"gamma_g\",\"type\":{\"name\":\"vector\",\"length\":" << Q_g << "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"array\",\"length\":" << ar_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"f_raw\",\"type\":{\"name\":\"vector\",\"length\":" << f_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nsample << ",\"cols\":" << Nsample << "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << f_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_grid_predict\",\"type\":{\"name\":\"vector\",\"length\":" << y_grid_predict_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"region_predict\",\"type\":{\"name\":\"vector\",\"length\":" << region_predict_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"phi_param\",\"type\":{\"name\":\"array\",\"length\":" << phi_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_param\",\"type\":{\"name\":\"array\",\"length\":" << sigma_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"gamma_g\",\"type\":{\"name\":\"vector\",\"length\":" << Q_g << "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"array\",\"length\":" << ar_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"f_raw\",\"type\":{\"name\":\"vector\",\"length\":" << f_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"matrix\",\"rows\":" << Nsample << ",\"cols\":" << Nsample << "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << f_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_grid_predict\",\"type\":{\"name\":\"vector\",\"length\":" << y_grid_predict_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"region_predict\",\"type\":{\"name\":\"vector\",\"length\":" << region_predict_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_lgcp_region_namespace::model_lgcp_region;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_lgcp_region_namespace::profiles__;
}
#endif
#endif
