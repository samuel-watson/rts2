// Generated by rstantools.  Do not edit by hand.

/*
    rts2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rts2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rts2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_approxlgcp_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 74, column 2 to column 23)",
                                                      " (in 'string', line 75, column 2 to column 55)",
                                                      " (in 'string', line 76, column 2 to column 57)",
                                                      " (in 'string', line 77, column 2 to column 18)",
                                                      " (in 'string', line 78, column 2 to column 53)",
                                                      " (in 'string', line 81, column 2 to column 23)",
                                                      " (in 'string', line 82, column 2 to column 23)",
                                                      " (in 'string', line 83, column 2 to column 24)",
                                                      " (in 'string', line 84, column 2 to column 26)",
                                                      " (in 'string', line 85, column 2 to column 24)",
                                                      " (in 'string', line 91, column 4 to column 27)",
                                                      " (in 'string', line 92, column 4 to column 23)",
                                                      " (in 'string', line 94, column 6 to column 89)",
                                                      " (in 'string', line 93, column 20 to line 95, column 5)",
                                                      " (in 'string', line 93, column 4 to line 95, column 5)",
                                                      " (in 'string', line 90, column 9 to line 96, column 3)",
                                                      " (in 'string', line 87, column 4 to column 23)",
                                                      " (in 'string', line 88, column 4 to column 19)",
                                                      " (in 'string', line 89, column 4 to column 38)",
                                                      " (in 'string', line 86, column 15 to line 90, column 3)",
                                                      " (in 'string', line 86, column 2 to line 96, column 3)",
                                                      " (in 'string', line 98, column 4 to column 35)",
                                                      " (in 'string', line 106, column 6 to column 36)",
                                                      " (in 'string', line 105, column 11 to line 107, column 5)",
                                                      " (in 'string', line 103, column 8 to column 103)",
                                                      " (in 'string', line 102, column 13 to line 104, column 7)",
                                                      " (in 'string', line 101, column 8 to column 54)",
                                                      " (in 'string', line 100, column 14 to line 102, column 7)",
                                                      " (in 'string', line 100, column 6 to line 104, column 7)",
                                                      " (in 'string', line 99, column 12 to line 105, column 5)",
                                                      " (in 'string', line 99, column 4 to line 107, column 5)",
                                                      " (in 'string', line 97, column 16 to line 108, column 3)",
                                                      " (in 'string', line 97, column 2 to line 108, column 3)",
                                                      " (in 'string', line 123, column 2 to column 36)",
                                                      " (in 'string', line 125, column 4 to column 60)",
                                                      " (in 'string', line 124, column 26 to line 126, column 3)",
                                                      " (in 'string', line 124, column 2 to line 126, column 3)",
                                                      " (in 'string', line 111, column 2 to column 32)",
                                                      " (in 'string', line 113, column 4 to column 56)",
                                                      " (in 'string', line 114, column 4 to column 52)",
                                                      " (in 'string', line 112, column 16 to line 115, column 3)",
                                                      " (in 'string', line 112, column 2 to line 115, column 3)",
                                                      " (in 'string', line 116, column 12 to column 29)",
                                                      " (in 'string', line 116, column 2 to column 29)",
                                                      " (in 'string', line 118, column 4 to column 65)",
                                                      " (in 'string', line 117, column 15 to line 119, column 3)",
                                                      " (in 'string', line 117, column 2 to line 119, column 3)",
                                                      " (in 'string', line 120, column 2 to column 40)",
                                                      " (in 'string', line 38, column 2 to column 17)",
                                                      " (in 'string', line 39, column 2 to column 17)",
                                                      " (in 'string', line 40, column 8 to column 9)",
                                                      " (in 'string', line 40, column 2 to column 18)",
                                                      " (in 'string', line 41, column 2 to column 17)",
                                                      " (in 'string', line 42, column 2 to column 20)",
                                                      " (in 'string', line 43, column 2 to column 23)",
                                                      " (in 'string', line 44, column 2 to column 9)",
                                                      " (in 'string', line 45, column 8 to column 18)",
                                                      " (in 'string', line 45, column 2 to column 26)",
                                                      " (in 'string', line 46, column 9 to column 16)",
                                                      " (in 'string', line 46, column 17 to column 18)",
                                                      " (in 'string', line 46, column 2 to column 27)",
                                                      " (in 'string', line 47, column 8 to column 12)",
                                                      " (in 'string', line 47, column 13 to column 14)",
                                                      " (in 'string', line 47, column 2 to column 28)",
                                                      " (in 'string', line 48, column 9 to column 19)",
                                                      " (in 'string', line 48, column 2 to column 29)",
                                                      " (in 'string', line 49, column 9 to column 19)",
                                                      " (in 'string', line 49, column 20 to column 21)",
                                                      " (in 'string', line 49, column 2 to column 25)",
                                                      " (in 'string', line 50, column 2 to column 29)",
                                                      " (in 'string', line 51, column 2 to column 26)",
                                                      " (in 'string', line 52, column 8 to column 9)",
                                                      " (in 'string', line 52, column 2 to column 35)",
                                                      " (in 'string', line 53, column 8 to column 9)",
                                                      " (in 'string', line 53, column 2 to column 33)",
                                                      " (in 'string', line 54, column 2 to column 10)",
                                                      " (in 'string', line 55, column 2 to column 38)",
                                                      " (in 'string', line 56, column 2 to column 27)",
                                                      " (in 'string', line 57, column 2 to column 25)",
                                                      " (in 'string', line 60, column 9 to column 16)",
                                                      " (in 'string', line 60, column 17 to column 21)",
                                                      " (in 'string', line 60, column 2 to column 27)",
                                                      " (in 'string', line 61, column 9 to column 19)",
                                                      " (in 'string', line 61, column 2 to column 47)",
                                                      " (in 'string', line 62, column 8 to column 28)",
                                                      " (in 'string', line 62, column 2 to column 48)",
                                                      " (in 'string', line 64, column 4 to column 45)",
                                                      " (in 'string', line 63, column 19 to line 65, column 3)",
                                                      " (in 'string', line 63, column 2 to line 65, column 3)",
                                                      " (in 'string', line 69, column 6 to column 104)",
                                                      " (in 'string', line 68, column 20 to line 70, column 5)",
                                                      " (in 'string', line 68, column 4 to line 70, column 5)",
                                                      " (in 'string', line 67, column 15 to line 71, column 3)",
                                                      " (in 'string', line 67, column 2 to line 71, column 3)",
                                                      " (in 'string', line 74, column 9 to column 13)",
                                                      " (in 'string', line 74, column 14 to column 16)",
                                                      " (in 'string', line 75, column 8 to column 25)",
                                                      " (in 'string', line 76, column 8 to column 25)",
                                                      " (in 'string', line 77, column 9 to column 10)",
                                                      " (in 'string', line 78, column 8 to column 25)",
                                                      " (in 'string', line 81, column 9 to column 19)",
                                                      " (in 'string', line 82, column 9 to column 13)",
                                                      " (in 'string', line 83, column 9 to column 13)",
                                                      " (in 'string', line 123, column 9 to column 19)",
                                                      " (in 'string', line 3, column 11 to column 12)",
                                                      " (in 'string', line 3, column 4 to column 18)",
                                                      " (in 'string', line 5, column 6 to column 40)",
                                                      " (in 'string', line 4, column 17 to line 5, column 42)",
                                                      " (in 'string', line 4, column 4 to line 5, column 42)",
                                                      " (in 'string', line 6, column 4 to column 15)",
                                                      " (in 'string', line 2, column 57 to line 7, column 3)",
                                                      " (in 'string', line 9, column 4 to column 11)",
                                                      " (in 'string', line 10, column 4 to column 18)",
                                                      " (in 'string', line 11, column 4 to column 17)",
                                                      " (in 'string', line 18, column 6 to column 80)",
                                                      " (in 'string', line 16, column 11 to line 19, column 5)",
                                                      " (in 'string', line 15, column 6 to column 85)",
                                                      " (in 'string', line 13, column 16 to line 16, column 5)",
                                                      " (in 'string', line 13, column 4 to line 19, column 5)",
                                                      " (in 'string', line 20, column 4 to column 13)",
                                                      " (in 'string', line 8, column 62 to line 21, column 3)",
                                                      " (in 'string', line 23, column 4 to column 20)",
                                                      " (in 'string', line 24, column 4 to column 20)",
                                                      " (in 'string', line 25, column 11 to column 12)",
                                                      " (in 'string', line 25, column 13 to column 14)",
                                                      " (in 'string', line 25, column 4 to column 19)",
                                                      " (in 'string', line 26, column 11 to column 12)",
                                                      " (in 'string', line 26, column 4 to column 18)",
                                                      " (in 'string', line 28, column 6 to column 65)",
                                                      " (in 'string', line 27, column 18 to line 29, column 5)",
                                                      " (in 'string', line 27, column 4 to line 29, column 5)",
                                                      " (in 'string', line 30, column 4 to column 17)",
                                                      " (in 'string', line 32, column 6 to column 26)",
                                                      " (in 'string', line 31, column 18 to line 33, column 5)",
                                                      " (in 'string', line 31, column 4 to line 33, column 5)",
                                                      " (in 'string', line 34, column 4 to column 15)",
                                                      " (in 'string', line 22, column 57 to line 35, column 3)"};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
lambda_nD(const std::vector<T0__>& L, const std::vector<int>& m,
          const int& D, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__>;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 105;
    validate_non_negative_index("lam", "D", D);
    Eigen::Matrix<local_scalar_t__, -1, 1> lam;
    lam = Eigen::Matrix<local_scalar_t__, -1, 1>(D);
    stan::math::fill(lam, DUMMY_VAR__);
    
    current_statement__ = 109;
    for (int i = 1; i <= D; ++i) {
      current_statement__ = 107;
      assign(lam, cons_list(index_uni(i), nil_index_list()),
        pow(((m[(i - 1)] * stan::math::pi()) / (2 * L[(i - 1)])), 2),
        "assigning variable lam");}
    current_statement__ = 110;
    return lam;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct lambda_nD_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<T0__>, -1, 1>
operator()(const std::vector<T0__>& L, const std::vector<int>& m,
           const int& D, std::ostream* pstream__)  const 
{
return lambda_nD(L, m, D, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
stan::value_type_t<T2__>>
spd_nD(const T0__& sigma, const T1__& phi, const T2__& w_arg__, const int& D,
       const int& mod, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>>;
  const auto& w = to_ref(w_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ S;
    S = DUMMY_VAR__;
    
    Eigen::Matrix<local_scalar_t__, -1, 1> wsq;
    wsq = Eigen::Matrix<local_scalar_t__, -1, 1>(2);
    stan::math::fill(wsq, DUMMY_VAR__);
    
    current_statement__ = 114;
    assign(wsq, nil_index_list(), elt_multiply(w, w),
      "assigning variable wsq");
    current_statement__ = 119;
    if (logical_eq(mod, 0)) {
      current_statement__ = 117;
      S = ((((sigma * pow(stan::math::sqrt((2 * stan::math::pi())), D)) *
              phi) * phi) *
            stan::math::exp(
              (-0.5 * ((phi * phi) * (wsq[(1 - 1)] + wsq[(2 - 1)])))));
    } else {
      current_statement__ = 115;
      S = (((((sigma * 4) * stan::math::pi()) * phi) * phi) *
            pow((1 + ((phi * phi) * (wsq[(1 - 1)] + wsq[(2 - 1)]))), -1.5));
    }
    current_statement__ = 120;
    return S;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct spd_nD_functor__ {
template <typename T0__, typename T1__, typename T2__>
stan::promote_args_t<T0__, T1__,
stan::value_type_t<T2__>>
operator()(const T0__& sigma, const T1__& phi, const T2__& w, const int& D,
           const int& mod, std::ostream* pstream__)  const 
{
return spd_nD(sigma, phi, w, D, mod, pstream__);
}
};
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T2__>>, -1, 1>
phi_nD(const std::vector<T0__>& L, const std::vector<int>& m,
       const T2__& x_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T2__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int c;
    c = std::numeric_limits<int>::min();
    
    current_statement__ = 122;
    c = cols(x);
    int r;
    r = std::numeric_limits<int>::min();
    
    current_statement__ = 123;
    r = rows(x);
    current_statement__ = 124;
    validate_non_negative_index("fi", "r", r);
    current_statement__ = 125;
    validate_non_negative_index("fi", "c", c);
    Eigen::Matrix<local_scalar_t__, -1, -1> fi;
    fi = Eigen::Matrix<local_scalar_t__, -1, -1>(r, c);
    stan::math::fill(fi, DUMMY_VAR__);
    
    current_statement__ = 127;
    validate_non_negative_index("fi1", "r", r);
    Eigen::Matrix<local_scalar_t__, -1, 1> fi1;
    fi1 = Eigen::Matrix<local_scalar_t__, -1, 1>(r);
    stan::math::fill(fi1, DUMMY_VAR__);
    
    current_statement__ = 131;
    for (int i = 1; i <= c; ++i) {
      current_statement__ = 129;
      assign(fi,
        cons_list(index_omni(), cons_list(index_uni(i), nil_index_list())),
        multiply((1 / stan::math::sqrt(L[(i - 1)])),
          stan::math::sin(
            divide(
              multiply((m[(i - 1)] * stan::math::pi()),
                add(
                  rvalue(x,
                    cons_list(index_omni(),
                      cons_list(index_uni(i), nil_index_list())), "x"),
                  L[(i - 1)])), (2 * L[(i - 1)])))), "assigning variable fi");
    }
    current_statement__ = 132;
    assign(fi1, nil_index_list(),
      rvalue(fi,
        cons_list(index_omni(), cons_list(index_uni(1), nil_index_list())),
        "fi"), "assigning variable fi1");
    current_statement__ = 135;
    for (int i = 2; i <= c; ++i) {
      current_statement__ = 133;
      assign(fi1, nil_index_list(),
        elt_multiply(stan::model::deep_copy(fi1),
          rvalue(fi,
            cons_list(index_omni(),
              cons_list(index_uni(i), nil_index_list())), "fi")),
        "assigning variable fi1");}
    current_statement__ = 136;
    return fi1;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct phi_nD_functor__ {
template <typename T0__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__,
stan::value_type_t<T2__>>, -1, 1>
operator()(const std::vector<T0__>& L, const std::vector<int>& m,
           const T2__& x, std::ostream* pstream__)  const 
{
return phi_nD(L, m, x, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_approxlgcp final : public model_base_crtp<model_approxlgcp> {
private:
  int D;
  int Q;
  std::vector<double> L;
  int M;
  int M_nD;
  int Nsample;
  int nT;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x_grid;
  std::vector<std::vector<int>> indices;
  Eigen::Matrix<double, -1, 1> popdens;
  Eigen::Matrix<double, -1, -1> X;
  std::vector<double> prior_lscale;
  std::vector<double> prior_var;
  std::vector<double> prior_linpred_mean;
  std::vector<double> prior_linpred_sd;
  int mod;
  int known_cov;
  double sigma_data;
  double phi_data;
  Eigen::Matrix<double, -1, -1> PHI;
  Eigen::Matrix<double, -1, 1> logpopdens;
  std::vector<double> diagSPD_data;
  int phi_param_1dim__;
  int sigma_param_1dim__;
  int ar_1dim__;
  int f_1dim__;
  int y_grid_predict_1dim__;
 
public:
  ~model_approxlgcp() { }
  
  inline std::string model_name() const final { return "model_approxlgcp"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_approxlgcp(stan::io::var_context& context__,
                   unsigned int random_seed__ = 0,
                   std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_approxlgcp_namespace::model_approxlgcp";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 49;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 49;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 49;
      current_statement__ = 49;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 50;
      context__.validate_dims("data initialization","Q","int",
          context__.to_vec());
      Q = std::numeric_limits<int>::min();
      
      current_statement__ = 50;
      Q = context__.vals_i("Q")[(1 - 1)];
      current_statement__ = 50;
      current_statement__ = 50;
      check_greater_or_equal(function__, "Q", Q, 1);
      current_statement__ = 51;
      validate_non_negative_index("L", "D", D);
      current_statement__ = 52;
      context__.validate_dims("data initialization","L","double",
          context__.to_vec(D));
      L = std::vector<double>(D, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 52;
      assign(L, nil_index_list(), context__.vals_r("L"),
        "assigning variable L");
      current_statement__ = 53;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 53;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 54;
      context__.validate_dims("data initialization","M_nD","int",
          context__.to_vec());
      M_nD = std::numeric_limits<int>::min();
      
      current_statement__ = 54;
      M_nD = context__.vals_i("M_nD")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "M_nD", M_nD, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization","Nsample","int",
          context__.to_vec());
      Nsample = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      Nsample = context__.vals_i("Nsample")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "Nsample", Nsample, 1);
      current_statement__ = 56;
      context__.validate_dims("data initialization","nT","int",
          context__.to_vec());
      nT = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      nT = context__.vals_i("nT")[(1 - 1)];
      current_statement__ = 57;
      validate_non_negative_index("y", "Nsample * nT", (Nsample * nT));
      current_statement__ = 58;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec((Nsample * nT)));
      y = std::vector<int>((Nsample * nT), std::numeric_limits<int>::min());
      
      current_statement__ = 58;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 59;
      validate_non_negative_index("x_grid", "Nsample", Nsample);
      current_statement__ = 60;
      validate_non_negative_index("x_grid", "D", D);
      current_statement__ = 61;
      context__.validate_dims("data initialization","x_grid","double",
          context__.to_vec(Nsample, D));
      x_grid = Eigen::Matrix<double, -1, -1>(Nsample, D);
      stan::math::fill(x_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_grid_flat__;
        current_statement__ = 61;
        assign(x_grid_flat__, nil_index_list(), context__.vals_r("x_grid"),
          "assigning variable x_grid_flat__");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= Nsample; ++sym2__) {
            current_statement__ = 61;
            assign(x_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_grid_flat__[(pos__ - 1)], "assigning variable x_grid");
            current_statement__ = 61;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 62;
      validate_non_negative_index("indices", "M_nD", M_nD);
      current_statement__ = 63;
      validate_non_negative_index("indices", "D", D);
      current_statement__ = 64;
      context__.validate_dims("data initialization","indices","int",
          context__.to_vec(M_nD, D));
      indices = std::vector<std::vector<int>>(M_nD, std::vector<int>(D, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> indices_flat__;
        current_statement__ = 64;
        assign(indices_flat__, nil_index_list(), context__.vals_i("indices"),
          "assigning variable indices_flat__");
        current_statement__ = 64;
        pos__ = 1;
        current_statement__ = 64;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 64;
          for (int sym2__ = 1; sym2__ <= M_nD; ++sym2__) {
            current_statement__ = 64;
            assign(indices,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              indices_flat__[(pos__ - 1)], "assigning variable indices");
            current_statement__ = 64;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 65;
      validate_non_negative_index("popdens", "Nsample * nT", (Nsample * nT));
      current_statement__ = 66;
      context__.validate_dims("data initialization","popdens","double",
          context__.to_vec((Nsample * nT)));
      popdens = Eigen::Matrix<double, -1, 1>((Nsample * nT));
      stan::math::fill(popdens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> popdens_flat__;
        current_statement__ = 66;
        assign(popdens_flat__, nil_index_list(), context__.vals_r("popdens"),
          "assigning variable popdens_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= (Nsample * nT); ++sym1__) {
          current_statement__ = 66;
          assign(popdens, cons_list(index_uni(sym1__), nil_index_list()),
            popdens_flat__[(pos__ - 1)], "assigning variable popdens");
          current_statement__ = 66;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 67;
      validate_non_negative_index("X", "Nsample * nT", (Nsample * nT));
      current_statement__ = 68;
      validate_non_negative_index("X", "Q", Q);
      current_statement__ = 69;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec((Nsample * nT), Q));
      X = Eigen::Matrix<double, -1, -1>((Nsample * nT), Q);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 69;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 69;
          for (int sym2__ = 1; sym2__ <= (Nsample * nT); ++sym2__) {
            current_statement__ = 69;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 69;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 70;
      context__.validate_dims("data initialization","prior_lscale","double",
          context__.to_vec(2));
      prior_lscale = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 70;
      assign(prior_lscale, nil_index_list(),
        context__.vals_r("prior_lscale"), "assigning variable prior_lscale");
      current_statement__ = 71;
      context__.validate_dims("data initialization","prior_var","double",
          context__.to_vec(2));
      prior_var = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 71;
      assign(prior_var, nil_index_list(), context__.vals_r("prior_var"),
        "assigning variable prior_var");
      current_statement__ = 72;
      validate_non_negative_index("prior_linpred_mean", "Q", Q);
      current_statement__ = 73;
      context__.validate_dims("data initialization","prior_linpred_mean",
          "double",context__.to_vec(Q));
      prior_linpred_mean = std::vector<double>(Q, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 73;
      assign(prior_linpred_mean, nil_index_list(),
        context__.vals_r("prior_linpred_mean"),
        "assigning variable prior_linpred_mean");
      current_statement__ = 74;
      validate_non_negative_index("prior_linpred_sd", "Q", Q);
      current_statement__ = 75;
      context__.validate_dims("data initialization","prior_linpred_sd",
          "double",context__.to_vec(Q));
      prior_linpred_sd = std::vector<double>(Q, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 75;
      assign(prior_linpred_sd, nil_index_list(),
        context__.vals_r("prior_linpred_sd"),
        "assigning variable prior_linpred_sd");
      current_statement__ = 76;
      context__.validate_dims("data initialization","mod","int",
          context__.to_vec());
      mod = std::numeric_limits<int>::min();
      
      current_statement__ = 76;
      mod = context__.vals_i("mod")[(1 - 1)];
      current_statement__ = 77;
      context__.validate_dims("data initialization","known_cov","int",
          context__.to_vec());
      known_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 77;
      known_cov = context__.vals_i("known_cov")[(1 - 1)];
      current_statement__ = 77;
      current_statement__ = 77;
      check_greater_or_equal(function__, "known_cov", known_cov, 0);
      current_statement__ = 77;
      current_statement__ = 77;
      check_less_or_equal(function__, "known_cov", known_cov, 1);
      current_statement__ = 78;
      context__.validate_dims("data initialization","sigma_data","double",
          context__.to_vec());
      sigma_data = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 78;
      sigma_data = context__.vals_r("sigma_data")[(1 - 1)];
      current_statement__ = 78;
      current_statement__ = 78;
      check_greater_or_equal(function__, "sigma_data", sigma_data, 0);
      current_statement__ = 79;
      context__.validate_dims("data initialization","phi_data","double",
          context__.to_vec());
      phi_data = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 79;
      phi_data = context__.vals_r("phi_data")[(1 - 1)];
      current_statement__ = 79;
      current_statement__ = 79;
      check_greater_or_equal(function__, "phi_data", phi_data, 0);
      current_statement__ = 80;
      validate_non_negative_index("PHI", "Nsample", Nsample);
      current_statement__ = 81;
      validate_non_negative_index("PHI", "M_nD", M_nD);
      current_statement__ = 82;
      PHI = Eigen::Matrix<double, -1, -1>(Nsample, M_nD);
      stan::math::fill(PHI, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 83;
      validate_non_negative_index("logpopdens", "Nsample * nT",
                                  (Nsample * nT));
      current_statement__ = 84;
      logpopdens = Eigen::Matrix<double, -1, 1>((Nsample * nT));
      stan::math::fill(logpopdens, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 84;
      assign(logpopdens, nil_index_list(), stan::math::log(popdens),
        "assigning variable logpopdens");
      current_statement__ = 85;
      validate_non_negative_index("diagSPD_data", "known_cov ? M_nD : 0",
                                  (known_cov ? M_nD : 0));
      current_statement__ = 86;
      diagSPD_data = std::vector<double>((known_cov ? M_nD : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 89;
      for (int m = 1; m <= M_nD; ++m) {
        current_statement__ = 87;
        assign(PHI,
          cons_list(index_omni(), cons_list(index_uni(m), nil_index_list())),
          phi_nD(L,
            rvalue(indices,
              cons_list(index_uni(m),
                cons_list(index_omni(), nil_index_list())), "indices"),
            x_grid, pstream__), "assigning variable PHI");}
      current_statement__ = 94;
      if (known_cov) {
        current_statement__ = 92;
        for (int m = 1; m <= M_nD; ++m) {
          current_statement__ = 90;
          assign(diagSPD_data, cons_list(index_uni(m), nil_index_list()),
            stan::math::sqrt(
              spd_nD(sigma_data, phi_data,
                stan::math::sqrt(
                  lambda_nD(L,
                    rvalue(indices,
                      cons_list(index_uni(m),
                        cons_list(index_omni(), nil_index_list())),
                      "indices"), D, pstream__)), D, mod, pstream__)),
            "assigning variable diagSPD_data");}
      } 
      current_statement__ = 95;
      validate_non_negative_index("beta", "M_nD", M_nD);
      current_statement__ = 96;
      validate_non_negative_index("beta", "nT", nT);
      current_statement__ = 97;
      phi_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 97;
      phi_param_1dim__ = (known_cov ? 0 : 1);
      current_statement__ = 97;
      validate_non_negative_index("phi_param", "known_cov ? 0 : 1",
                                  phi_param_1dim__);
      current_statement__ = 98;
      sigma_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      sigma_param_1dim__ = (known_cov ? 0 : 1);
      current_statement__ = 98;
      validate_non_negative_index("sigma_param", "known_cov ? 0 : 1",
                                  sigma_param_1dim__);
      current_statement__ = 99;
      validate_non_negative_index("gamma", "Q", Q);
      current_statement__ = 100;
      ar_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 100;
      ar_1dim__ = (known_cov ? 0 : 1);
      current_statement__ = 100;
      validate_non_negative_index("ar", "known_cov ? 0 : 1", ar_1dim__);
      current_statement__ = 101;
      f_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 101;
      f_1dim__ = (Nsample * nT);
      current_statement__ = 101;
      validate_non_negative_index("f", "Nsample * nT", f_1dim__);
      current_statement__ = 102;
      validate_non_negative_index("diagSPD", "M_nD", M_nD);
      current_statement__ = 103;
      validate_non_negative_index("SPD_beta", "M_nD", M_nD);
      current_statement__ = 104;
      y_grid_predict_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 104;
      y_grid_predict_1dim__ = (Nsample * nT);
      current_statement__ = 104;
      validate_non_negative_index("y_grid_predict", "Nsample * nT",
                                  y_grid_predict_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += M_nD * nT;
      num_params_r__ += phi_param_1dim__;
      num_params_r__ += sigma_param_1dim__;
      num_params_r__ += Q;
      num_params_r__ += ar_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_approxlgcp_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, -1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, -1>(M_nD, nT);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta = in__.matrix(M_nD, nT);
      std::vector<local_scalar_t__> phi_param;
      phi_param = std::vector<local_scalar_t__>(phi_param_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi_param");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05, lp__),
            "assigning variable phi_param");
        } else {
          current_statement__ = 2;
          assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05),
            "assigning variable phi_param");
        }}
      std::vector<local_scalar_t__> sigma_param;
      sigma_param = std::vector<local_scalar_t__>(sigma_param_1dim__, DUMMY_VAR__);
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_param");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 3;
        if (jacobian__) {
          current_statement__ = 3;
          assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05, lp__),
            "assigning variable sigma_param");
        } else {
          current_statement__ = 3;
          assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05),
            "assigning variable sigma_param");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(Q);
      stan::math::fill(gamma, DUMMY_VAR__);
      
      current_statement__ = 4;
      gamma = in__.vector(Q);
      std::vector<local_scalar_t__> ar;
      ar = std::vector<local_scalar_t__>(ar_1dim__, DUMMY_VAR__);
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ar");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(ar[(sym1__ - 1)], -1, 1, lp__),
            "assigning variable ar");
        } else {
          current_statement__ = 5;
          assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lub_constrain(ar[(sym1__ - 1)], -1, 1),
            "assigning variable ar");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> f;
      f = Eigen::Matrix<local_scalar_t__, -1, 1>(f_1dim__);
      stan::math::fill(f, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> diagSPD;
      diagSPD = Eigen::Matrix<local_scalar_t__, -1, 1>(M_nD);
      stan::math::fill(diagSPD, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> SPD_beta;
      SPD_beta = Eigen::Matrix<local_scalar_t__, -1, 1>(M_nD);
      stan::math::fill(SPD_beta, DUMMY_VAR__);
      
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 21;
      if (known_cov) {
        current_statement__ = 17;
        sigma = sigma_data;
        current_statement__ = 18;
        phi = phi_data;
        current_statement__ = 19;
        assign(diagSPD, nil_index_list(), to_vector(diagSPD_data),
          "assigning variable diagSPD");
      } else {
        current_statement__ = 11;
        sigma = sigma_param[(1 - 1)];
        current_statement__ = 12;
        phi = phi_param[(1 - 1)];
        current_statement__ = 15;
        for (int m = 1; m <= M_nD; ++m) {
          current_statement__ = 13;
          assign(diagSPD, cons_list(index_uni(m), nil_index_list()),
            stan::math::sqrt(
              spd_nD(sigma, phi,
                stan::math::sqrt(
                  lambda_nD(L,
                    rvalue(indices,
                      cons_list(index_uni(m),
                        cons_list(index_omni(), nil_index_list())),
                      "indices"), D, pstream__)), D, mod, pstream__)),
            "assigning variable diagSPD");}
      }
      current_statement__ = 33;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 22;
        assign(SPD_beta, nil_index_list(),
          elt_multiply(diagSPD,
            rvalue(beta,
              cons_list(index_omni(),
                cons_list(index_uni(t), nil_index_list())), "beta")),
          "assigning variable SPD_beta");
        current_statement__ = 31;
        if (logical_gt(nT, 1)) {
          current_statement__ = 29;
          if (logical_eq(t, 1)) {
            current_statement__ = 27;
            assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
              multiply(multiply((1 / (1 - pow(ar[(1 - 1)], 2))), PHI),
                SPD_beta), "assigning variable f");
          } else {
            current_statement__ = 25;
            assign(f,
              cons_list(
                index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                nil_index_list()),
              add(
                multiply(ar[(1 - 1)],
                  stan::model::deep_copy(
                    rvalue(f,
                      cons_list(
                        index_min_max(((Nsample * (t - 2)) + 1), ((t - 1) *
                                                                   Nsample)),
                        nil_index_list()), "f"))), multiply(PHI, SPD_beta)),
              "assigning variable f");
          }
        } else {
          current_statement__ = 23;
          assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
            multiply(PHI, SPD_beta), "assigning variable f");
        }}
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma", sigma, 1e-05);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "phi", phi, 1e-05);
      {
        current_statement__ = 38;
        lp_accum__.add(normal_lpdf<propto__>(to_vector(beta), 0, 1));
        current_statement__ = 42;
        if (logical_negation(known_cov)) {
          current_statement__ = 39;
          lp_accum__.add(
            normal_lpdf<propto__>(phi_param, prior_lscale[(1 - 1)],
              prior_lscale[(2 - 1)]));
          current_statement__ = 40;
          lp_accum__.add(
            normal_lpdf<propto__>(sigma_param, prior_var[(1 - 1)],
              prior_var[(2 - 1)]));
        } 
        current_statement__ = 44;
        if (logical_gt(nT, 1)) {
          current_statement__ = 43;
          lp_accum__.add(normal_lpdf<propto__>(ar, 0, 1));
        } 
        current_statement__ = 47;
        for (int q = 1; q <= Q; ++q) {
          current_statement__ = 45;
          lp_accum__.add(
            normal_lpdf<propto__>(gamma[(q - 1)],
              prior_linpred_mean[(q - 1)], prior_linpred_sd[(q - 1)]));}
        current_statement__ = 48;
        lp_accum__.add(
          poisson_log_lpmf<propto__>(y,
            add(add(multiply(X, gamma), logpopdens), f)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_approxlgcp_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(M_nD, nT);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta = in__.matrix(M_nD, nT);
      std::vector<double> phi_param;
      phi_param = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi_param");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05),
          "assigning variable phi_param");}
      std::vector<double> sigma_param;
      sigma_param = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_param");}
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05),
          "assigning variable sigma_param");}
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      gamma = in__.vector(Q);
      std::vector<double> ar;
      ar = std::vector<double>(ar_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable ar");}
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_constrain(ar[(sym1__ - 1)], -1, 1),
          "assigning variable ar");}
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(f_1dim__);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> diagSPD;
      diagSPD = Eigen::Matrix<double, -1, 1>(M_nD);
      stan::math::fill(diagSPD, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> SPD_beta;
      SPD_beta = Eigen::Matrix<double, -1, 1>(M_nD);
      stan::math::fill(SPD_beta, std::numeric_limits<double>::quiet_NaN());
      
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M_nD; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "beta"));}}
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        vars__.emplace_back(phi_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        vars__.emplace_back(ar[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 21;
      if (known_cov) {
        current_statement__ = 17;
        sigma = sigma_data;
        current_statement__ = 18;
        phi = phi_data;
        current_statement__ = 19;
        assign(diagSPD, nil_index_list(), to_vector(diagSPD_data),
          "assigning variable diagSPD");
      } else {
        current_statement__ = 11;
        sigma = sigma_param[(1 - 1)];
        current_statement__ = 12;
        phi = phi_param[(1 - 1)];
        current_statement__ = 15;
        for (int m = 1; m <= M_nD; ++m) {
          current_statement__ = 13;
          assign(diagSPD, cons_list(index_uni(m), nil_index_list()),
            stan::math::sqrt(
              spd_nD(sigma, phi,
                stan::math::sqrt(
                  lambda_nD(L,
                    rvalue(indices,
                      cons_list(index_uni(m),
                        cons_list(index_omni(), nil_index_list())),
                      "indices"), D, pstream__)), D, mod, pstream__)),
            "assigning variable diagSPD");}
      }
      current_statement__ = 33;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 22;
        assign(SPD_beta, nil_index_list(),
          elt_multiply(diagSPD,
            rvalue(beta,
              cons_list(index_omni(),
                cons_list(index_uni(t), nil_index_list())), "beta")),
          "assigning variable SPD_beta");
        current_statement__ = 31;
        if (logical_gt(nT, 1)) {
          current_statement__ = 29;
          if (logical_eq(t, 1)) {
            current_statement__ = 27;
            assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
              multiply(multiply((1 / (1 - pow(ar[(1 - 1)], 2))), PHI),
                SPD_beta), "assigning variable f");
          } else {
            current_statement__ = 25;
            assign(f,
              cons_list(
                index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                nil_index_list()),
              add(
                multiply(ar[(1 - 1)],
                  stan::model::deep_copy(
                    rvalue(f,
                      cons_list(
                        index_min_max(((Nsample * (t - 2)) + 1), ((t - 1) *
                                                                   Nsample)),
                        nil_index_list()), "f"))), multiply(PHI, SPD_beta)),
              "assigning variable f");
          }
        } else {
          current_statement__ = 23;
          assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
            multiply(PHI, SPD_beta), "assigning variable f");
        }}
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma", sigma, 1e-05);
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "phi", phi, 1e-05);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
          vars__.emplace_back(f[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_nD; ++sym1__) {
          vars__.emplace_back(diagSPD[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= M_nD; ++sym1__) {
          vars__.emplace_back(SPD_beta[(sym1__ - 1)]);}
        vars__.emplace_back(sigma);
        vars__.emplace_back(phi);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y_grid_predict;
      y_grid_predict = Eigen::Matrix<double, -1, 1>(y_grid_predict_1dim__);
      stan::math::fill(y_grid_predict, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 37;
      for (int i = 1; i <= (Nsample * nT); ++i) {
        current_statement__ = 35;
        assign(y_grid_predict, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            ((multiply(
                rvalue(X,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "X"), gamma)
               + logpopdens[(i - 1)]) + f[(i - 1)])),
          "assigning variable y_grid_predict");}
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        vars__.emplace_back(y_grid_predict[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, -1> beta;
      beta = Eigen::Matrix<double, -1, -1>(M_nD, nT);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 1;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
          current_statement__ = 1;
          for (int sym2__ = 1; sym2__ <= M_nD; ++sym2__) {
            current_statement__ = 1;
            assign(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              beta_flat__[(pos__ - 1)], "assigning variable beta");
            current_statement__ = 1;
            pos__ = (pos__ + 1);}}
      }
      std::vector<double> phi_param;
      phi_param = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(phi_param, nil_index_list(), context__.vals_r("phi_param"),
        "assigning variable phi_param");
      std::vector<double> phi_param_free__;
      phi_param_free__ = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(phi_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(phi_param[(sym1__ - 1)], 1e-05),
          "assigning variable phi_param_free__");}
      std::vector<double> sigma_param;
      sigma_param = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      assign(sigma_param, nil_index_list(), context__.vals_r("sigma_param"),
        "assigning variable sigma_param");
      std::vector<double> sigma_param_free__;
      sigma_param_free__ = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 3;
        assign(sigma_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_param[(sym1__ - 1)], 1e-05),
          "assigning variable sigma_param_free__");}
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 4;
        assign(gamma_flat__, nil_index_list(), context__.vals_r("gamma"),
          "assigning variable gamma_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 4;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_flat__[(pos__ - 1)], "assigning variable gamma");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      std::vector<double> ar;
      ar = std::vector<double>(ar_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(ar, nil_index_list(), context__.vals_r("ar"),
        "assigning variable ar");
      std::vector<double> ar_free__;
      ar_free__ = std::vector<double>(ar_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        current_statement__ = 5;
        assign(ar_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lub_free(ar[(sym1__ - 1)], -1, 1),
          "assigning variable ar_free__");}
      for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= M_nD; ++sym2__) {
          vars__.emplace_back(
            rvalue(beta,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())), "beta"));}}
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        vars__.emplace_back(phi_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
        vars__.emplace_back(ar_free__[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta");
    names__.emplace_back("phi_param");
    names__.emplace_back("sigma_param");
    names__.emplace_back("gamma");
    names__.emplace_back("ar");
    names__.emplace_back("f");
    names__.emplace_back("diagSPD");
    names__.emplace_back("SPD_beta");
    names__.emplace_back("sigma");
    names__.emplace_back("phi");
    names__.emplace_back("y_grid_predict");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_nD),
                                             static_cast<size_t>(nT)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(phi_param_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_param_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(ar_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(f_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_nD)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(M_nD)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_grid_predict_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M_nD; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ar" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_nD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diagSPD" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_nD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "SPD_beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "phi");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_grid_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= nT; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= M_nD; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= ar_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ar" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_nD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "diagSPD" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= M_nD; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "SPD_beta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "sigma");
      param_names__.emplace_back(std::string() + "phi");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_grid_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << M_nD << ",\"cols\":" << nT << "},\"block\":\"parameters\"},{\"name\":\"phi_param\",\"type\":{\"name\":\"array\",\"length\":" << phi_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_param\",\"type\":{\"name\":\"array\",\"length\":" << sigma_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"array\",\"length\":" << ar_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << f_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"diagSPD\",\"type\":{\"name\":\"vector\",\"length\":" << M_nD << "},\"block\":\"transformed_parameters\"},{\"name\":\"SPD_beta\",\"type\":{\"name\":\"vector\",\"length\":" << M_nD << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_grid_predict\",\"type\":{\"name\":\"vector\",\"length\":" << y_grid_predict_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta\",\"type\":{\"name\":\"matrix\",\"rows\":" << M_nD << ",\"cols\":" << nT << "},\"block\":\"parameters\"},{\"name\":\"phi_param\",\"type\":{\"name\":\"array\",\"length\":" << phi_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_param\",\"type\":{\"name\":\"array\",\"length\":" << sigma_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"array\",\"length\":" << ar_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << f_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"diagSPD\",\"type\":{\"name\":\"vector\",\"length\":" << M_nD << "},\"block\":\"transformed_parameters\"},{\"name\":\"SPD_beta\",\"type\":{\"name\":\"vector\",\"length\":" << M_nD << "},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_grid_predict\",\"type\":{\"name\":\"vector\",\"length\":" << y_grid_predict_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_approxlgcp_namespace::model_approxlgcp;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_approxlgcp_namespace::profiles__;
}
#endif
#endif
