// Generated by rstantools.  Do not edit by hand.

/*
    rts2 is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rts2 is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rts2.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_approxlgcp_nngp_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 108, column 2 to column 49)",
                                                      " (in 'string', line 109, column 2 to column 51)",
                                                      " (in 'string', line 110, column 2 to column 18)",
                                                      " (in 'string', line 111, column 2 to column 28)",
                                                      " (in 'string', line 112, column 2 to column 27)",
                                                      " (in 'string', line 115, column 2 to column 26)",
                                                      " (in 'string', line 116, column 2 to column 23)",
                                                      " (in 'string', line 117, column 2 to column 24)",
                                                      " (in 'string', line 118, column 2 to column 26)",
                                                      " (in 'string', line 124, column 4 to column 27)",
                                                      " (in 'string', line 125, column 4 to column 23)",
                                                      " (in 'string', line 126, column 4 to column 44)",
                                                      " (in 'string', line 123, column 9 to line 127, column 3)",
                                                      " (in 'string', line 120, column 4 to column 26)",
                                                      " (in 'string', line 121, column 4 to column 22)",
                                                      " (in 'string', line 122, column 4 to column 17)",
                                                      " (in 'string', line 119, column 15 to line 123, column 3)",
                                                      " (in 'string', line 119, column 2 to line 127, column 3)",
                                                      " (in 'string', line 138, column 6 to column 16)",
                                                      " (in 'string', line 137, column 11 to line 139, column 5)",
                                                      " (in 'string', line 135, column 8 to column 122)",
                                                      " (in 'string', line 134, column 13 to line 136, column 7)",
                                                      " (in 'string', line 133, column 8 to column 53)",
                                                      " (in 'string', line 132, column 14 to line 134, column 7)",
                                                      " (in 'string', line 132, column 6 to line 136, column 7)",
                                                      " (in 'string', line 131, column 12 to line 137, column 5)",
                                                      " (in 'string', line 131, column 4 to line 139, column 5)",
                                                      " (in 'string', line 130, column 16 to line 140, column 3)",
                                                      " (in 'string', line 130, column 2 to line 140, column 3)",
                                                      " (in 'string', line 169, column 2 to column 36)",
                                                      " (in 'string', line 172, column 4 to column 60)",
                                                      " (in 'string', line 171, column 26 to line 173, column 3)",
                                                      " (in 'string', line 171, column 2 to line 173, column 3)",
                                                      " (in 'string', line 144, column 4 to column 56)",
                                                      " (in 'string', line 145, column 4 to column 52)",
                                                      " (in 'string', line 143, column 16 to line 146, column 3)",
                                                      " (in 'string', line 143, column 2 to line 146, column 3)",
                                                      " (in 'string', line 148, column 2 to column 19)",
                                                      " (in 'string', line 150, column 4 to column 65)",
                                                      " (in 'string', line 149, column 15 to line 151, column 3)",
                                                      " (in 'string', line 149, column 2 to line 151, column 3)",
                                                      " (in 'string', line 162, column 6 to column 27)",
                                                      " (in 'string', line 161, column 11 to line 163, column 5)",
                                                      " (in 'string', line 159, column 8 to column 60)",
                                                      " (in 'string', line 158, column 13 to line 160, column 7)",
                                                      " (in 'string', line 157, column 8 to column 40)",
                                                      " (in 'string', line 156, column 14 to line 158, column 7)",
                                                      " (in 'string', line 156, column 6 to line 160, column 7)",
                                                      " (in 'string', line 155, column 12 to line 161, column 5)",
                                                      " (in 'string', line 155, column 4 to line 163, column 5)",
                                                      " (in 'string', line 154, column 16 to line 164, column 3)",
                                                      " (in 'string', line 154, column 2 to line 164, column 3)",
                                                      " (in 'string', line 166, column 2 to column 40)",
                                                      " (in 'string', line 81, column 2 to column 17)",
                                                      " (in 'string', line 82, column 2 to column 17)",
                                                      " (in 'string', line 83, column 2 to column 17)",
                                                      " (in 'string', line 84, column 2 to column 23)",
                                                      " (in 'string', line 85, column 2 to column 9)",
                                                      " (in 'string', line 86, column 9 to column 10)",
                                                      " (in 'string', line 86, column 11 to column 18)",
                                                      " (in 'string', line 86, column 2 to column 20)",
                                                      " (in 'string', line 87, column 8 to column 18)",
                                                      " (in 'string', line 87, column 2 to column 20)",
                                                      " (in 'string', line 88, column 9 to column 16)",
                                                      " (in 'string', line 88, column 17 to column 18)",
                                                      " (in 'string', line 88, column 2 to column 27)",
                                                      " (in 'string', line 89, column 9 to column 19)",
                                                      " (in 'string', line 89, column 2 to column 29)",
                                                      " (in 'string', line 90, column 9 to column 19)",
                                                      " (in 'string', line 90, column 20 to column 21)",
                                                      " (in 'string', line 90, column 2 to column 25)",
                                                      " (in 'string', line 91, column 2 to column 23)",
                                                      " (in 'string', line 92, column 2 to column 20)",
                                                      " (in 'string', line 93, column 26 to column 27)",
                                                      " (in 'string', line 93, column 2 to column 29)",
                                                      " (in 'string', line 94, column 24 to column 25)",
                                                      " (in 'string', line 94, column 2 to column 27)",
                                                      " (in 'string', line 95, column 2 to column 10)",
                                                      " (in 'string', line 96, column 2 to column 38)",
                                                      " (in 'string', line 97, column 27 to column 44)",
                                                      " (in 'string', line 97, column 2 to column 46)",
                                                      " (in 'string', line 98, column 25 to column 42)",
                                                      " (in 'string', line 98, column 2 to column 44)",
                                                      " (in 'string', line 101, column 9 to column 19)",
                                                      " (in 'string', line 101, column 2 to column 47)",
                                                      " (in 'string', line 102, column 9 to column 28)",
                                                      " (in 'string', line 102, column 29 to column 52)",
                                                      " (in 'string', line 102, column 2 to column 62)",
                                                      " (in 'string', line 104, column 4 to column 65)",
                                                      " (in 'string', line 103, column 15 to line 105, column 3)",
                                                      " (in 'string', line 103, column 2 to line 105, column 3)",
                                                      " (in 'string', line 108, column 30 to column 47)",
                                                      " (in 'string', line 109, column 32 to column 49)",
                                                      " (in 'string', line 110, column 9 to column 10)",
                                                      " (in 'string', line 112, column 9 to column 19)",
                                                      " (in 'string', line 115, column 9 to column 13)",
                                                      " (in 'string', line 115, column 14 to column 21)",
                                                      " (in 'string', line 116, column 9 to column 19)",
                                                      " (in 'string', line 169, column 9 to column 19)",
                                                      " (in 'string', line 4, column 19 to column 35)",
                                                      " (in 'string', line 5, column 4 to column 21)",
                                                      " (in 'string', line 6, column 11 to column 12)",
                                                      " (in 'string', line 6, column 13 to column 14)",
                                                      " (in 'string', line 6, column 4 to column 38)",
                                                      " (in 'string', line 7, column 15 to column 16)",
                                                      " (in 'string', line 7, column 4 to column 42)",
                                                      " (in 'string', line 8, column 11 to column 14)",
                                                      " (in 'string', line 8, column 15 to column 16)",
                                                      " (in 'string', line 8, column 4 to column 21)",
                                                      " (in 'string', line 9, column 4 to column 15)",
                                                      " (in 'string', line 10, column 11 to column 12)",
                                                      " (in 'string', line 10, column 13 to column 14)",
                                                      " (in 'string', line 10, column 4 to column 21)",
                                                      " (in 'string', line 11, column 11 to column 12)",
                                                      " (in 'string', line 11, column 4 to column 19)",
                                                      " (in 'string', line 12, column 4 to column 14)",
                                                      " (in 'string', line 14, column 4 to column 17)",
                                                      " (in 'string', line 17, column 6 to column 32)",
                                                      " (in 'string', line 18, column 6 to column 60)",
                                                      " (in 'string', line 19, column 6 to column 44)",
                                                      " (in 'string', line 21, column 8 to column 26)",
                                                      " (in 'string', line 20, column 24 to line 22, column 7)",
                                                      " (in 'string', line 20, column 6 to line 22, column 7)",
                                                      " (in 'string', line 26, column 12 to line 27, column 77)",
                                                      " (in 'string', line 32, column 14 to column 59)",
                                                      " (in 'string', line 33, column 14 to column 59)",
                                                      " (in 'string', line 31, column 19 to line 34, column 13)",
                                                      " (in 'string', line 29, column 14 to column 74)",
                                                      " (in 'string', line 30, column 14 to column 74)",
                                                      " (in 'string', line 28, column 24 to line 31, column 13)",
                                                      " (in 'string', line 28, column 12 to line 34, column 13)",
                                                      " (in 'string', line 25, column 32 to line 36, column 11)",
                                                      " (in 'string', line 25, column 10 to line 36, column 11)",
                                                      " (in 'string', line 24, column 30 to line 37, column 9)",
                                                      " (in 'string', line 24, column 8 to line 37, column 9)",
                                                      " (in 'string', line 23, column 20 to line 38, column 7)",
                                                      " (in 'string', line 23, column 6 to line 38, column 7)",
                                                      " (in 'string', line 40, column 8 to column 75)",
                                                      " (in 'string', line 41, column 8 to column 51)",
                                                      " (in 'string', line 39, column 24 to line 42, column 7)",
                                                      " (in 'string', line 39, column 6 to line 42, column 7)",
                                                      " (in 'string', line 43, column 6 to column 81)",
                                                      " (in 'string', line 44, column 6 to column 63)",
                                                      " (in 'string', line 16, column 17 to line 45, column 5)",
                                                      " (in 'string', line 16, column 4 to line 45, column 5)",
                                                      " (in 'string', line 47, column 4 to column 25)",
                                                      " (in 'string', line 49, column 4 to column 15)",
                                                      " (in 'string', line 3, column 46 to line 51, column 4)",
                                                      " (in 'string', line 54, column 4 to column 21)",
                                                      " (in 'string', line 55, column 4 to column 25)",
                                                      " (in 'string', line 56, column 4 to column 17)",
                                                      " (in 'string', line 57, column 4 to column 12)",
                                                      " (in 'string', line 58, column 4 to column 12)",
                                                      " (in 'string', line 59, column 4 to column 12)",
                                                      " (in 'string', line 60, column 4 to column 15)",
                                                      " (in 'string', line 61, column 11 to column 12)",
                                                      " (in 'string', line 61, column 13 to column 14)",
                                                      " (in 'string', line 61, column 4 to column 29)",
                                                      " (in 'string', line 62, column 11 to column 12)",
                                                      " (in 'string', line 62, column 4 to column 28)",
                                                      " (in 'string', line 64, column 5 to column 17)",
                                                      " (in 'string', line 66, column 6 to column 27)",
                                                      " (in 'string', line 65, column 17 to line 67, column 5)",
                                                      " (in 'string', line 65, column 4 to line 67, column 5)",
                                                      " (in 'string', line 68, column 4 to column 24)",
                                                      " (in 'string', line 70, column 6 to column 32)",
                                                      " (in 'string', line 71, column 6 to column 74)",
                                                      " (in 'string', line 72, column 6 to column 23)",
                                                      " (in 'string', line 69, column 17 to line 73, column 5)",
                                                      " (in 'string', line 69, column 4 to line 73, column 5)",
                                                      " (in 'string', line 74, column 4 to column 44)",
                                                      " (in 'string', line 75, column 4 to column 14)",
                                                      " (in 'string', line 53, column 49 to line 76, column 4)"};
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
stan::value_type_t<T2__>>, -1, -1>
getAD(const T0__& alpha, const T1__& theta, const T2__& x_arg__,
      const std::vector<std::vector<int>>& NN, const int& mod,
      std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          T1__,
          stan::value_type_t<T2__>>;
  const auto& x = to_ref(x_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 100;
    n = rows(x);
    int M;
    M = std::numeric_limits<int>::min();
    
    current_statement__ = 101;
    M = stan::math::size(NN);
    current_statement__ = 102;
    validate_non_negative_index("A", "M", M);
    current_statement__ = 103;
    validate_non_negative_index("A", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> A;
    A = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n);
    stan::math::fill(A, DUMMY_VAR__);
    
    current_statement__ = 104;
    assign(A, nil_index_list(), rep_matrix(0, M, n), "assigning variable A");
    current_statement__ = 105;
    validate_non_negative_index("D", "n", n);
    Eigen::Matrix<local_scalar_t__, 1, -1> D;
    D = Eigen::Matrix<local_scalar_t__, 1, -1>(n);
    stan::math::fill(D, DUMMY_VAR__);
    
    current_statement__ = 106;
    assign(D, nil_index_list(), rep_row_vector(0, n), "assigning variable D");
    current_statement__ = 107;
    validate_non_negative_index("AD", "M + 1", (M + 1));
    current_statement__ = 108;
    validate_non_negative_index("AD", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> AD;
    AD = Eigen::Matrix<local_scalar_t__, -1, -1>((M + 1), n);
    stan::math::fill(AD, DUMMY_VAR__);
    
    int idxlim;
    idxlim = std::numeric_limits<int>::min();
    
    current_statement__ = 111;
    validate_non_negative_index("smat", "M", M);
    current_statement__ = 112;
    validate_non_negative_index("smat", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, -1> smat;
    smat = Eigen::Matrix<local_scalar_t__, -1, -1>(M, M);
    stan::math::fill(smat, DUMMY_VAR__);
    
    current_statement__ = 114;
    validate_non_negative_index("svec", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> svec;
    svec = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(svec, DUMMY_VAR__);
    
    local_scalar_t__ dist;
    dist = DUMMY_VAR__;
    
    current_statement__ = 117;
    assign(D, cons_list(index_uni(1), nil_index_list()), alpha,
      "assigning variable D");
    current_statement__ = 145;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 118;
      idxlim = (logical_lte(i, M) ? (i - 1) : M);
      current_statement__ = 119;
      assign(smat,
        cons_list(index_min_max(1, idxlim),
          cons_list(index_min_max(1, idxlim), nil_index_list())),
        rep_matrix(0, idxlim, idxlim), "assigning variable smat");
      current_statement__ = 120;
      assign(svec, cons_list(index_min_max(1, idxlim), nil_index_list()),
        rep_vector(0, idxlim), "assigning variable svec");
      current_statement__ = 123;
      for (int j = 1; j <= idxlim; ++j) {
        current_statement__ = 121;
        assign(smat,
          cons_list(index_uni(j), cons_list(index_uni(j), nil_index_list())),
          alpha, "assigning variable smat");}
      current_statement__ = 137;
      if (logical_gt(idxlim, 1)) {
        current_statement__ = 135;
        for (int j = 1; j <= (idxlim - 1); ++j) {
          current_statement__ = 133;
          for (int k = (j + 1); k <= idxlim; ++k) {
            current_statement__ = 124;
            dist = stan::math::sqrt(
                     (((rvalue(x,
                          cons_list(index_uni(NN[(j - 1)][(i - 1)]),
                            cons_list(index_uni(1), nil_index_list())), "x")
                         -
                         rvalue(x,
                           cons_list(index_uni(NN[(k - 1)][(i - 1)]),
                             cons_list(index_uni(1), nil_index_list())), "x"))
                        *
                        (rvalue(x,
                           cons_list(index_uni(NN[(j - 1)][(i - 1)]),
                             cons_list(index_uni(1), nil_index_list())), "x")
                          -
                          rvalue(x,
                            cons_list(index_uni(NN[(k - 1)][(i - 1)]),
                              cons_list(index_uni(1), nil_index_list())),
                            "x"))) +
                       ((rvalue(x,
                           cons_list(index_uni(NN[(j - 1)][(i - 1)]),
                             cons_list(index_uni(2), nil_index_list())), "x")
                          -
                          rvalue(x,
                            cons_list(index_uni(NN[(k - 1)][(i - 1)]),
                              cons_list(index_uni(2), nil_index_list())),
                            "x")) *
                         (rvalue(x,
                            cons_list(index_uni(NN[(j - 1)][(i - 1)]),
                              cons_list(index_uni(2), nil_index_list())),
                            "x") -
                           rvalue(x,
                             cons_list(index_uni(NN[(k - 1)][(i - 1)]),
                               cons_list(index_uni(2), nil_index_list())),
                             "x")))));
            current_statement__ = 131;
            if (logical_eq(mod, 0)) {
              current_statement__ = 128;
              assign(smat,
                cons_list(index_uni(j),
                  cons_list(index_uni(k), nil_index_list())),
                ((alpha * alpha) *
                  stan::math::exp((-(dist * dist) / (theta * theta)))),
                "assigning variable smat");
              current_statement__ = 129;
              assign(smat,
                cons_list(index_uni(k),
                  cons_list(index_uni(j), nil_index_list())),
                ((alpha * alpha) *
                  stan::math::exp((-(dist * dist) / (theta * theta)))),
                "assigning variable smat");
            } else {
              current_statement__ = 125;
              assign(smat,
                cons_list(index_uni(j),
                  cons_list(index_uni(k), nil_index_list())),
                ((alpha * alpha) * stan::math::exp((-dist / theta))),
                "assigning variable smat");
              current_statement__ = 126;
              assign(smat,
                cons_list(index_uni(k),
                  cons_list(index_uni(j), nil_index_list())),
                ((alpha * alpha) * stan::math::exp((-dist / theta))),
                "assigning variable smat");
            }}}
      } 
      current_statement__ = 141;
      for (int j = 1; j <= idxlim; ++j) {
        current_statement__ = 138;
        dist = stan::math::sqrt(
                 (pow(
                    (rvalue(x,
                       cons_list(index_uni(NN[(j - 1)][(i - 1)]),
                         cons_list(index_uni(1), nil_index_list())), "x") -
                      rvalue(x,
                        cons_list(index_uni(i),
                          cons_list(index_uni(1), nil_index_list())), "x")),
                    2) +
                   pow(
                     (rvalue(x,
                        cons_list(index_uni(NN[(j - 1)][(i - 1)]),
                          cons_list(index_uni(2), nil_index_list())), "x") -
                       rvalue(x,
                         cons_list(index_uni(i),
                           cons_list(index_uni(2), nil_index_list())), "x")),
                     2)));
        current_statement__ = 139;
        assign(svec, cons_list(index_uni(j), nil_index_list()),
          ((alpha * alpha) * stan::math::exp((-dist / theta))),
          "assigning variable svec");}
      current_statement__ = 142;
      assign(A,
        cons_list(index_min_max(1, idxlim),
          cons_list(index_uni(i), nil_index_list())),
        mdivide_left_spd(
          rvalue(smat,
            cons_list(index_min_max(1, idxlim),
              cons_list(index_min_max(1, idxlim), nil_index_list())), "smat"),
          rvalue(svec, cons_list(index_min_max(1, idxlim), nil_index_list()),
            "svec")), "assigning variable A");
      current_statement__ = 143;
      assign(D, cons_list(index_uni(i), nil_index_list()),
        (alpha -
          dot_product(
            rvalue(A,
              cons_list(index_min_max(1, idxlim),
                cons_list(index_uni(i), nil_index_list())), "A"),
            rvalue(svec,
              cons_list(index_min_max(1, idxlim), nil_index_list()), "svec"))),
        "assigning variable D");}
    current_statement__ = 146;
    assign(AD, nil_index_list(), append_row(A, D), "assigning variable AD");
    current_statement__ = 147;
    return AD;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct getAD_functor__ {
template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<stan::promote_args_t<T0__, T1__,
stan::value_type_t<T2__>>, -1, -1>
operator()(const T0__& alpha, const T1__& theta, const T2__& x,
           const std::vector<std::vector<int>>& NN, const int& mod,
           std::ostream* pstream__)  const 
{
return getAD(alpha, theta, x, NN, mod, pstream__);
}
};
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
nngp_lpdf(const T0__& u_arg__, const T1__& AD_arg__,
          const std::vector<std::vector<int>>& NN, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>>;
  const auto& u = to_ref(u_arg__);
  const auto& AD = to_ref(AD_arg__);
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int n;
    n = std::numeric_limits<int>::min();
    
    current_statement__ = 149;
    n = cols(AD);
    int M;
    M = std::numeric_limits<int>::min();
    
    current_statement__ = 150;
    M = (rows(AD) - 1);
    local_scalar_t__ logdetD;
    logdetD = DUMMY_VAR__;
    
    local_scalar_t__ qf;
    qf = DUMMY_VAR__;
    
    local_scalar_t__ au;
    au = DUMMY_VAR__;
    
    local_scalar_t__ ll;
    ll = DUMMY_VAR__;
    
    int idxlim;
    idxlim = std::numeric_limits<int>::min();
    
    current_statement__ = 156;
    validate_non_negative_index("A", "M", M);
    current_statement__ = 157;
    validate_non_negative_index("A", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, -1> A;
    A = Eigen::Matrix<local_scalar_t__, -1, -1>(M, n);
    stan::math::fill(A, DUMMY_VAR__);
    
    current_statement__ = 158;
    assign(A, nil_index_list(),
      rvalue(AD,
        cons_list(index_min_max(1, M),
          cons_list(index_omni(), nil_index_list())), "AD"),
      "assigning variable A");
    current_statement__ = 159;
    validate_non_negative_index("D", "n", n);
    Eigen::Matrix<local_scalar_t__, -1, 1> D;
    D = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
    stan::math::fill(D, DUMMY_VAR__);
    
    current_statement__ = 160;
    assign(D, nil_index_list(),
      transpose(
        rvalue(AD,
          cons_list(index_uni((M + 1)),
            cons_list(index_omni(), nil_index_list())), "AD")),
      "assigning variable D");
    current_statement__ = 161;
    logdetD = 0;
    current_statement__ = 164;
    for (int i = 1; i <= n; ++i) {
      current_statement__ = 162;
      logdetD = (logdetD + stan::math::log(D[(i - 1)]));}
    current_statement__ = 165;
    qf = ((u[(1 - 1)] * u[(1 - 1)]) / D[(1 - 1)]);
    current_statement__ = 170;
    for (int i = 2; i <= n; ++i) {
      current_statement__ = 166;
      idxlim = (logical_lte(i, M) ? (i - 1) : M);
      current_statement__ = 167;
      au = (u[(i - 1)] -
             dot_product(
               rvalue(A,
                 cons_list(index_min_max(1, idxlim),
                   cons_list(index_uni(i), nil_index_list())), "A"),
               to_vector(
                 rvalue(u,
                   cons_list(
                     index_multi(rvalue(NN,
                                   cons_list(index_min_max(1, idxlim),
                                     cons_list(index_uni(i),
                                       nil_index_list())), "NN")),
                     nil_index_list()), "u"))));
      current_statement__ = 168;
      qf = (qf + ((au * au) / D[(i - 1)]));}
    current_statement__ = 171;
    ll = (((-0.5 * logdetD) - (0.5 * qf)) - ((0.5 * n) * stan::math::pi()));
    current_statement__ = 172;
    return ll;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct nngp_lpdf_functor__ {
template <bool propto__, typename T0__, typename T1__>
stan::promote_args_t<stan::value_type_t<T0__>,
stan::value_type_t<T1__>>
operator()(const T0__& u, const T1__& AD,
           const std::vector<std::vector<int>>& NN, std::ostream* pstream__)  const 
{
return nngp_lpdf<propto__>(u, AD, NN, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_approxlgcp_nngp final : public model_base_crtp<model_approxlgcp_nngp> {
private:
  int D;
  int Q;
  int M;
  int Nsample;
  int nT;
  std::vector<std::vector<int>> NN;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x_grid;
  Eigen::Matrix<double, -1, 1> popdens;
  Eigen::Matrix<double, -1, -1> X;
  std::vector<double> prior_lscale;
  std::vector<double> prior_var;
  std::vector<double> prior_linpred_mean;
  std::vector<double> prior_linpred_sd;
  int mod;
  int known_cov;
  std::vector<double> sigma_data;
  std::vector<double> phi_data;
  Eigen::Matrix<double, -1, 1> logpopdens;
  Eigen::Matrix<double, -1, -1> AD_data;
  int phi_param_1dim__;
  int sigma_param_1dim__;
  int f_raw_1dim__;
  int AD_1dim__;
  int f_1dim__;
  int y_grid_predict_1dim__;
 
public:
  ~model_approxlgcp_nngp() { }
  
  inline std::string model_name() const final { return "model_approxlgcp_nngp"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_approxlgcp_nngp(stan::io::var_context& context__,
                        unsigned int random_seed__ = 0,
                        std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_approxlgcp_nngp_namespace::model_approxlgcp_nngp";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 54;
      context__.validate_dims("data initialization","D","int",
          context__.to_vec());
      D = std::numeric_limits<int>::min();
      
      current_statement__ = 54;
      D = context__.vals_i("D")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "D", D, 1);
      current_statement__ = 55;
      context__.validate_dims("data initialization","Q","int",
          context__.to_vec());
      Q = std::numeric_limits<int>::min();
      
      current_statement__ = 55;
      Q = context__.vals_i("Q")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "Q", Q, 1);
      current_statement__ = 56;
      context__.validate_dims("data initialization","M","int",
          context__.to_vec());
      M = std::numeric_limits<int>::min();
      
      current_statement__ = 56;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 56;
      current_statement__ = 56;
      check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 57;
      context__.validate_dims("data initialization","Nsample","int",
          context__.to_vec());
      Nsample = std::numeric_limits<int>::min();
      
      current_statement__ = 57;
      Nsample = context__.vals_i("Nsample")[(1 - 1)];
      current_statement__ = 57;
      current_statement__ = 57;
      check_greater_or_equal(function__, "Nsample", Nsample, 1);
      current_statement__ = 58;
      context__.validate_dims("data initialization","nT","int",
          context__.to_vec());
      nT = std::numeric_limits<int>::min();
      
      current_statement__ = 58;
      nT = context__.vals_i("nT")[(1 - 1)];
      current_statement__ = 59;
      validate_non_negative_index("NN", "M", M);
      current_statement__ = 60;
      validate_non_negative_index("NN", "Nsample", Nsample);
      current_statement__ = 61;
      context__.validate_dims("data initialization","NN","int",
          context__.to_vec(M, Nsample));
      NN = std::vector<std::vector<int>>(M, std::vector<int>(Nsample, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> NN_flat__;
        current_statement__ = 61;
        assign(NN_flat__, nil_index_list(), context__.vals_i("NN"),
          "assigning variable NN_flat__");
        current_statement__ = 61;
        pos__ = 1;
        current_statement__ = 61;
        for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
          current_statement__ = 61;
          for (int sym2__ = 1; sym2__ <= M; ++sym2__) {
            current_statement__ = 61;
            assign(NN,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              NN_flat__[(pos__ - 1)], "assigning variable NN");
            current_statement__ = 61;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 62;
      validate_non_negative_index("y", "Nsample * nT", (Nsample * nT));
      current_statement__ = 63;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec((Nsample * nT)));
      y = std::vector<int>((Nsample * nT), std::numeric_limits<int>::min());
      
      current_statement__ = 63;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      current_statement__ = 64;
      validate_non_negative_index("x_grid", "Nsample", Nsample);
      current_statement__ = 65;
      validate_non_negative_index("x_grid", "D", D);
      current_statement__ = 66;
      context__.validate_dims("data initialization","x_grid","double",
          context__.to_vec(Nsample, D));
      x_grid = Eigen::Matrix<double, -1, -1>(Nsample, D);
      stan::math::fill(x_grid, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> x_grid_flat__;
        current_statement__ = 66;
        assign(x_grid_flat__, nil_index_list(), context__.vals_r("x_grid"),
          "assigning variable x_grid_flat__");
        current_statement__ = 66;
        pos__ = 1;
        current_statement__ = 66;
        for (int sym1__ = 1; sym1__ <= D; ++sym1__) {
          current_statement__ = 66;
          for (int sym2__ = 1; sym2__ <= Nsample; ++sym2__) {
            current_statement__ = 66;
            assign(x_grid,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              x_grid_flat__[(pos__ - 1)], "assigning variable x_grid");
            current_statement__ = 66;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 67;
      validate_non_negative_index("popdens", "Nsample * nT", (Nsample * nT));
      current_statement__ = 68;
      context__.validate_dims("data initialization","popdens","double",
          context__.to_vec((Nsample * nT)));
      popdens = Eigen::Matrix<double, -1, 1>((Nsample * nT));
      stan::math::fill(popdens, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> popdens_flat__;
        current_statement__ = 68;
        assign(popdens_flat__, nil_index_list(), context__.vals_r("popdens"),
          "assigning variable popdens_flat__");
        current_statement__ = 68;
        pos__ = 1;
        current_statement__ = 68;
        for (int sym1__ = 1; sym1__ <= (Nsample * nT); ++sym1__) {
          current_statement__ = 68;
          assign(popdens, cons_list(index_uni(sym1__), nil_index_list()),
            popdens_flat__[(pos__ - 1)], "assigning variable popdens");
          current_statement__ = 68;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 69;
      validate_non_negative_index("X", "Nsample * nT", (Nsample * nT));
      current_statement__ = 70;
      validate_non_negative_index("X", "Q", Q);
      current_statement__ = 71;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec((Nsample * nT), Q));
      X = Eigen::Matrix<double, -1, -1>((Nsample * nT), Q);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 71;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 71;
        pos__ = 1;
        current_statement__ = 71;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 71;
          for (int sym2__ = 1; sym2__ <= (Nsample * nT); ++sym2__) {
            current_statement__ = 71;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 71;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 72;
      context__.validate_dims("data initialization","prior_lscale","double",
          context__.to_vec(2));
      prior_lscale = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 72;
      assign(prior_lscale, nil_index_list(),
        context__.vals_r("prior_lscale"), "assigning variable prior_lscale");
      current_statement__ = 73;
      context__.validate_dims("data initialization","prior_var","double",
          context__.to_vec(2));
      prior_var = std::vector<double>(2, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 73;
      assign(prior_var, nil_index_list(), context__.vals_r("prior_var"),
        "assigning variable prior_var");
      current_statement__ = 74;
      validate_non_negative_index("prior_linpred_mean", "Q", Q);
      current_statement__ = 75;
      context__.validate_dims("data initialization","prior_linpred_mean",
          "double",context__.to_vec(Q));
      prior_linpred_mean = std::vector<double>(Q, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 75;
      assign(prior_linpred_mean, nil_index_list(),
        context__.vals_r("prior_linpred_mean"),
        "assigning variable prior_linpred_mean");
      current_statement__ = 76;
      validate_non_negative_index("prior_linpred_sd", "Q", Q);
      current_statement__ = 77;
      context__.validate_dims("data initialization","prior_linpred_sd",
          "double",context__.to_vec(Q));
      prior_linpred_sd = std::vector<double>(Q, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 77;
      assign(prior_linpred_sd, nil_index_list(),
        context__.vals_r("prior_linpred_sd"),
        "assigning variable prior_linpred_sd");
      current_statement__ = 78;
      context__.validate_dims("data initialization","mod","int",
          context__.to_vec());
      mod = std::numeric_limits<int>::min();
      
      current_statement__ = 78;
      mod = context__.vals_i("mod")[(1 - 1)];
      current_statement__ = 79;
      context__.validate_dims("data initialization","known_cov","int",
          context__.to_vec());
      known_cov = std::numeric_limits<int>::min();
      
      current_statement__ = 79;
      known_cov = context__.vals_i("known_cov")[(1 - 1)];
      current_statement__ = 79;
      current_statement__ = 79;
      check_greater_or_equal(function__, "known_cov", known_cov, 0);
      current_statement__ = 79;
      current_statement__ = 79;
      check_less_or_equal(function__, "known_cov", known_cov, 1);
      current_statement__ = 80;
      validate_non_negative_index("sigma_data", "known_cov ? 1 : 0",
                                  (known_cov ? 1 : 0));
      current_statement__ = 81;
      context__.validate_dims("data initialization","sigma_data","double",
          context__.to_vec((known_cov ? 1 : 0)));
      sigma_data = std::vector<double>((known_cov ? 1 : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 81;
      assign(sigma_data, nil_index_list(), context__.vals_r("sigma_data"),
        "assigning variable sigma_data");
      current_statement__ = 81;
      for (int sym1__ = 1; sym1__ <= (known_cov ? 1 : 0); ++sym1__) {
        current_statement__ = 81;
        current_statement__ = 81;
        check_greater_or_equal(function__, "sigma_data[sym1__]",
                               sigma_data[(sym1__ - 1)], 0);}
      current_statement__ = 82;
      validate_non_negative_index("phi_data", "known_cov ? 1 : 0",
                                  (known_cov ? 1 : 0));
      current_statement__ = 83;
      context__.validate_dims("data initialization","phi_data","double",
          context__.to_vec((known_cov ? 1 : 0)));
      phi_data = std::vector<double>((known_cov ? 1 : 0), std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 83;
      assign(phi_data, nil_index_list(), context__.vals_r("phi_data"),
        "assigning variable phi_data");
      current_statement__ = 83;
      for (int sym1__ = 1; sym1__ <= (known_cov ? 1 : 0); ++sym1__) {
        current_statement__ = 83;
        current_statement__ = 83;
        check_greater_or_equal(function__, "phi_data[sym1__]",
                               phi_data[(sym1__ - 1)], 0);}
      current_statement__ = 84;
      validate_non_negative_index("logpopdens", "Nsample * nT",
                                  (Nsample * nT));
      current_statement__ = 85;
      logpopdens = Eigen::Matrix<double, -1, 1>((Nsample * nT));
      stan::math::fill(logpopdens, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 85;
      assign(logpopdens, nil_index_list(), stan::math::log(popdens),
        "assigning variable logpopdens");
      current_statement__ = 86;
      validate_non_negative_index("AD_data", "known_cov ? M + 1 : 0",
                                  (known_cov ? (M + 1) : 0));
      current_statement__ = 87;
      validate_non_negative_index("AD_data", "known_cov ? Nsample : 0",
                                  (known_cov ? Nsample : 0));
      current_statement__ = 88;
      AD_data = Eigen::Matrix<double, -1, -1>((known_cov ? (M + 1) : 0), (
        known_cov ? Nsample : 0));
      stan::math::fill(AD_data, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 91;
      if (known_cov) {
        current_statement__ = 89;
        assign(AD_data, nil_index_list(),
          getAD(sigma_data[(1 - 1)], phi_data[(1 - 1)], x_grid, NN,
            mod, pstream__), "assigning variable AD_data");
      } 
      current_statement__ = 92;
      phi_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 92;
      phi_param_1dim__ = (known_cov ? 1 : 0);
      current_statement__ = 92;
      validate_non_negative_index("phi_param", "known_cov ? 1 : 0",
                                  phi_param_1dim__);
      current_statement__ = 93;
      sigma_param_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 93;
      sigma_param_1dim__ = (known_cov ? 1 : 0);
      current_statement__ = 93;
      validate_non_negative_index("sigma_param", "known_cov ? 1 : 0",
                                  sigma_param_1dim__);
      current_statement__ = 94;
      validate_non_negative_index("gamma", "Q", Q);
      current_statement__ = 95;
      f_raw_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 95;
      f_raw_1dim__ = (Nsample * nT);
      current_statement__ = 95;
      validate_non_negative_index("f_raw", "Nsample * nT", f_raw_1dim__);
      current_statement__ = 96;
      AD_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 96;
      AD_1dim__ = (M + 1);
      current_statement__ = 96;
      validate_non_negative_index("AD", "M + 1", AD_1dim__);
      current_statement__ = 97;
      validate_non_negative_index("AD", "Nsample", Nsample);
      current_statement__ = 98;
      f_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 98;
      f_1dim__ = (Nsample * nT);
      current_statement__ = 98;
      validate_non_negative_index("f", "Nsample * nT", f_1dim__);
      current_statement__ = 99;
      y_grid_predict_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      y_grid_predict_1dim__ = (Nsample * nT);
      current_statement__ = 99;
      validate_non_negative_index("y_grid_predict", "Nsample * nT",
                                  y_grid_predict_1dim__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += phi_param_1dim__;
      num_params_r__ += sigma_param_1dim__;
      num_params_r__ += Q;
      num_params_r__ += 1;
      num_params_r__ += f_raw_1dim__;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_approxlgcp_nngp_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> phi_param;
      phi_param = std::vector<local_scalar_t__>(phi_param_1dim__, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi_param");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05, lp__),
            "assigning variable phi_param");
        } else {
          current_statement__ = 1;
          assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05),
            "assigning variable phi_param");
        }}
      std::vector<local_scalar_t__> sigma_param;
      sigma_param = std::vector<local_scalar_t__>(sigma_param_1dim__, DUMMY_VAR__);
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_param");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        if (jacobian__) {
          current_statement__ = 2;
          assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05, lp__),
            "assigning variable sigma_param");
        } else {
          current_statement__ = 2;
          assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05),
            "assigning variable sigma_param");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>(Q);
      stan::math::fill(gamma, DUMMY_VAR__);
      
      current_statement__ = 3;
      gamma = in__.vector(Q);
      local_scalar_t__ ar;
      ar = DUMMY_VAR__;
      
      current_statement__ = 4;
      ar = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        ar = stan::math::lub_constrain(ar, -1, 1, lp__);
      } else {
        current_statement__ = 4;
        ar = stan::math::lub_constrain(ar, -1, 1);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> f_raw;
      f_raw = Eigen::Matrix<local_scalar_t__, -1, 1>(f_raw_1dim__);
      stan::math::fill(f_raw, DUMMY_VAR__);
      
      current_statement__ = 5;
      f_raw = in__.vector(f_raw_1dim__);
      Eigen::Matrix<local_scalar_t__, -1, -1> AD;
      AD = Eigen::Matrix<local_scalar_t__, -1, -1>(AD_1dim__, Nsample);
      stan::math::fill(AD, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> f;
      f = Eigen::Matrix<local_scalar_t__, -1, 1>(f_1dim__);
      stan::math::fill(f, DUMMY_VAR__);
      
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      local_scalar_t__ sigma;
      sigma = DUMMY_VAR__;
      
      current_statement__ = 18;
      if (known_cov) {
        current_statement__ = 14;
        sigma = sigma_data[(1 - 1)];
        current_statement__ = 15;
        phi = phi_data[(1 - 1)];
        current_statement__ = 16;
        assign(AD, nil_index_list(), AD_data, "assigning variable AD");
      } else {
        current_statement__ = 10;
        sigma = sigma_param[(1 - 1)];
        current_statement__ = 11;
        phi = phi_param[(1 - 1)];
        current_statement__ = 12;
        assign(AD, nil_index_list(),
          getAD(sigma, phi, x_grid, NN, mod, pstream__),
          "assigning variable AD");
      }
      current_statement__ = 29;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 27;
        if (logical_gt(nT, 1)) {
          current_statement__ = 25;
          if (logical_eq(t, 1)) {
            current_statement__ = 23;
            assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
              multiply((1 / (1 - pow(ar, 2))),
                rvalue(f_raw,
                  cons_list(index_min_max(1, Nsample), nil_index_list()),
                  "f_raw")), "assigning variable f");
          } else {
            current_statement__ = 21;
            assign(f,
              cons_list(
                index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                nil_index_list()),
              add(
                multiply(ar,
                  stan::model::deep_copy(
                    rvalue(f,
                      cons_list(
                        index_min_max(((Nsample * (t - 2)) + 1), ((t - 1) *
                                                                   Nsample)),
                        nil_index_list()), "f"))),
                rvalue(f_raw,
                  cons_list(
                    index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                    nil_index_list()), "f_raw")), "assigning variable f");
          }
        } else {
          current_statement__ = 19;
          assign(f, nil_index_list(), f_raw, "assigning variable f");
        }}
      current_statement__ = 8;
      current_statement__ = 8;
      check_greater_or_equal(function__, "phi", phi, 1e-05);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma", sigma, 1e-05);
      {
        current_statement__ = 37;
        if (logical_negation(known_cov)) {
          current_statement__ = 34;
          lp_accum__.add(
            normal_lpdf<propto__>(phi_param, prior_lscale[(1 - 1)],
              prior_lscale[(2 - 1)]));
          current_statement__ = 35;
          lp_accum__.add(
            normal_lpdf<propto__>(sigma_param, prior_var[(1 - 1)],
              prior_var[(2 - 1)]));
        } 
        current_statement__ = 38;
        lp_accum__.add(normal_lpdf<propto__>(ar, 0, 1));
        current_statement__ = 41;
        for (int q = 1; q <= Q; ++q) {
          current_statement__ = 39;
          lp_accum__.add(
            normal_lpdf<propto__>(gamma[(q - 1)],
              prior_linpred_mean[(q - 1)], prior_linpred_sd[(q - 1)]));}
        current_statement__ = 52;
        for (int t = 1; t <= nT; ++t) {
          current_statement__ = 50;
          if (logical_gt(nT, 1)) {
            current_statement__ = 48;
            if (logical_eq(t, 1)) {
              current_statement__ = 46;
              lp_accum__.add(
                nngp_lpdf<propto__>(
                  rvalue(f_raw,
                    cons_list(index_min_max(1, Nsample), nil_index_list()),
                    "f_raw"), AD, NN, pstream__));
            } else {
              current_statement__ = 44;
              lp_accum__.add(
                nngp_lpdf<propto__>(
                  rvalue(f_raw,
                    cons_list(
                      index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                      nil_index_list()), "f_raw"), AD, NN, pstream__));
            }
          } else {
            current_statement__ = 42;
            lp_accum__.add(nngp_lpdf<propto__>(f_raw, AD, NN, pstream__));
          }}
        current_statement__ = 53;
        lp_accum__.add(
          poisson_log_lpmf<propto__>(y,
            add(add(multiply(X, gamma), logpopdens), f)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_approxlgcp_nngp_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> phi_param;
      phi_param = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable phi_param");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(phi_param[(sym1__ - 1)], 1e-05),
          "assigning variable phi_param");}
      std::vector<double> sigma_param;
      sigma_param = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable sigma_param");}
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(sigma_param[(sym1__ - 1)], 1e-05),
          "assigning variable sigma_param");}
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      gamma = in__.vector(Q);
      double ar;
      ar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      ar = in__.scalar();
      current_statement__ = 4;
      ar = stan::math::lub_constrain(ar, -1, 1);
      Eigen::Matrix<double, -1, 1> f_raw;
      f_raw = Eigen::Matrix<double, -1, 1>(f_raw_1dim__);
      stan::math::fill(f_raw, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      f_raw = in__.vector(f_raw_1dim__);
      Eigen::Matrix<double, -1, -1> AD;
      AD = Eigen::Matrix<double, -1, -1>(AD_1dim__, Nsample);
      stan::math::fill(AD, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> f;
      f = Eigen::Matrix<double, -1, 1>(f_1dim__);
      stan::math::fill(f, std::numeric_limits<double>::quiet_NaN());
      
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      double sigma;
      sigma = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        vars__.emplace_back(phi_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_param[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      vars__.emplace_back(ar);
      for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
        vars__.emplace_back(f_raw[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 18;
      if (known_cov) {
        current_statement__ = 14;
        sigma = sigma_data[(1 - 1)];
        current_statement__ = 15;
        phi = phi_data[(1 - 1)];
        current_statement__ = 16;
        assign(AD, nil_index_list(), AD_data, "assigning variable AD");
      } else {
        current_statement__ = 10;
        sigma = sigma_param[(1 - 1)];
        current_statement__ = 11;
        phi = phi_param[(1 - 1)];
        current_statement__ = 12;
        assign(AD, nil_index_list(),
          getAD(sigma, phi, x_grid, NN, mod, pstream__),
          "assigning variable AD");
      }
      current_statement__ = 29;
      for (int t = 1; t <= nT; ++t) {
        current_statement__ = 27;
        if (logical_gt(nT, 1)) {
          current_statement__ = 25;
          if (logical_eq(t, 1)) {
            current_statement__ = 23;
            assign(f, cons_list(index_min_max(1, Nsample), nil_index_list()),
              multiply((1 / (1 - pow(ar, 2))),
                rvalue(f_raw,
                  cons_list(index_min_max(1, Nsample), nil_index_list()),
                  "f_raw")), "assigning variable f");
          } else {
            current_statement__ = 21;
            assign(f,
              cons_list(
                index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                nil_index_list()),
              add(
                multiply(ar,
                  stan::model::deep_copy(
                    rvalue(f,
                      cons_list(
                        index_min_max(((Nsample * (t - 2)) + 1), ((t - 1) *
                                                                   Nsample)),
                        nil_index_list()), "f"))),
                rvalue(f_raw,
                  cons_list(
                    index_min_max(((Nsample * (t - 1)) + 1), (t * Nsample)),
                    nil_index_list()), "f_raw")), "assigning variable f");
          }
        } else {
          current_statement__ = 19;
          assign(f, nil_index_list(), f_raw, "assigning variable f");
        }}
      current_statement__ = 8;
      current_statement__ = 8;
      check_greater_or_equal(function__, "phi", phi, 1e-05);
      current_statement__ = 9;
      current_statement__ = 9;
      check_greater_or_equal(function__, "sigma", sigma, 1e-05);
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= AD_1dim__; ++sym2__) {
            vars__.emplace_back(
              rvalue(AD,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(sym1__), nil_index_list())), "AD"));}}
        for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
          vars__.emplace_back(f[(sym1__ - 1)]);}
        vars__.emplace_back(phi);
        vars__.emplace_back(sigma);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> y_grid_predict;
      y_grid_predict = Eigen::Matrix<double, -1, 1>(y_grid_predict_1dim__);
      stan::math::fill(y_grid_predict, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 33;
      for (int i = 1; i <= (Nsample * nT); ++i) {
        current_statement__ = 31;
        assign(y_grid_predict, cons_list(index_uni(i), nil_index_list()),
          stan::math::exp(
            ((multiply(
                rvalue(X,
                  cons_list(index_uni(i),
                    cons_list(index_omni(), nil_index_list())), "X"), gamma)
               + logpopdens[(i - 1)]) + f[(i - 1)])),
          "assigning variable y_grid_predict");}
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        vars__.emplace_back(y_grid_predict[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> phi_param;
      phi_param = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(phi_param, nil_index_list(), context__.vals_r("phi_param"),
        "assigning variable phi_param");
      std::vector<double> phi_param_free__;
      phi_param_free__ = std::vector<double>(phi_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        current_statement__ = 1;
        assign(phi_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(phi_param[(sym1__ - 1)], 1e-05),
          "assigning variable phi_param_free__");}
      std::vector<double> sigma_param;
      sigma_param = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      assign(sigma_param, nil_index_list(), context__.vals_r("sigma_param"),
        "assigning variable sigma_param");
      std::vector<double> sigma_param_free__;
      sigma_param_free__ = std::vector<double>(sigma_param_1dim__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        current_statement__ = 2;
        assign(sigma_param_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(sigma_param[(sym1__ - 1)], 1e-05),
          "assigning variable sigma_param_free__");}
      Eigen::Matrix<double, -1, 1> gamma;
      gamma = Eigen::Matrix<double, -1, 1>(Q);
      stan::math::fill(gamma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 3;
        assign(gamma_flat__, nil_index_list(), context__.vals_r("gamma"),
          "assigning variable gamma_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
          current_statement__ = 3;
          assign(gamma, cons_list(index_uni(sym1__), nil_index_list()),
            gamma_flat__[(pos__ - 1)], "assigning variable gamma");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      double ar;
      ar = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      ar = context__.vals_r("ar")[(1 - 1)];
      double ar_free__;
      ar_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      ar_free__ = stan::math::lub_free(ar, -1, 1);
      Eigen::Matrix<double, -1, 1> f_raw;
      f_raw = Eigen::Matrix<double, -1, 1>(f_raw_1dim__);
      stan::math::fill(f_raw, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> f_raw_flat__;
        current_statement__ = 5;
        assign(f_raw_flat__, nil_index_list(), context__.vals_r("f_raw"),
          "assigning variable f_raw_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
          current_statement__ = 5;
          assign(f_raw, cons_list(index_uni(sym1__), nil_index_list()),
            f_raw_flat__[(pos__ - 1)], "assigning variable f_raw");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
        vars__.emplace_back(phi_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
        vars__.emplace_back(sigma_param_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
        vars__.emplace_back(gamma[(sym1__ - 1)]);}
      vars__.emplace_back(ar_free__);
      for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
        vars__.emplace_back(f_raw[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("phi_param");
    names__.emplace_back("sigma_param");
    names__.emplace_back("gamma");
    names__.emplace_back("ar");
    names__.emplace_back("f_raw");
    names__.emplace_back("AD");
    names__.emplace_back("f");
    names__.emplace_back("phi");
    names__.emplace_back("sigma");
    names__.emplace_back("y_grid_predict");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(phi_param_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_param_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Q)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(f_raw_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(AD_1dim__),
                                             static_cast<size_t>(Nsample)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(f_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(y_grid_predict_1dim__)
                                             });
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "ar");
    for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "f_raw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= AD_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "AD" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "phi");
      param_names__.emplace_back(std::string() + "sigma");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_grid_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= phi_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "phi_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= sigma_param_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma_param" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= Q; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "gamma" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "ar");
    for (int sym1__ = 1; sym1__ <= f_raw_1dim__; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "f_raw" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= Nsample; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= AD_1dim__; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "AD" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            }}
        }}
      for (int sym1__ = 1; sym1__ <= f_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "f" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "phi");
      param_names__.emplace_back(std::string() + "sigma");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= y_grid_predict_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "y_grid_predict" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"phi_param\",\"type\":{\"name\":\"array\",\"length\":" << phi_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_param\",\"type\":{\"name\":\"array\",\"length\":" << sigma_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_raw\",\"type\":{\"name\":\"vector\",\"length\":" << f_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"AD\",\"type\":{\"name\":\"matrix\",\"rows\":" << AD_1dim__ << ",\"cols\":" << Nsample << "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << f_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_grid_predict\",\"type\":{\"name\":\"vector\",\"length\":" << y_grid_predict_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"phi_param\",\"type\":{\"name\":\"array\",\"length\":" << phi_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sigma_param\",\"type\":{\"name\":\"array\",\"length\":" << sigma_param_1dim__ << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"vector\",\"length\":" << Q << "},\"block\":\"parameters\"},{\"name\":\"ar\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"f_raw\",\"type\":{\"name\":\"vector\",\"length\":" << f_raw_1dim__ << "},\"block\":\"parameters\"},{\"name\":\"AD\",\"type\":{\"name\":\"matrix\",\"rows\":" << AD_1dim__ << ",\"cols\":" << Nsample << "},\"block\":\"transformed_parameters\"},{\"name\":\"f\",\"type\":{\"name\":\"vector\",\"length\":" << f_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"y_grid_predict\",\"type\":{\"name\":\"vector\",\"length\":" << y_grid_predict_1dim__ << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_approxlgcp_nngp_namespace::model_approxlgcp_nngp;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_approxlgcp_nngp_namespace::profiles__;
}
#endif
#endif
